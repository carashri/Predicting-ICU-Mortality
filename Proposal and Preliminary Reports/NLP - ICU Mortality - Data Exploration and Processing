{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Begin by importing the libraries needed for data cleaning and preparation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next step is to read in the first dataset of interest, ADMISSIONS, and have a first look at the columns and rows. <br> \n",
    "This dataset was obtained from the MIMIC III database (https://mimic.physionet.org/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(58976, 19)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ROW_ID</th>\n",
       "      <th>SUBJECT_ID</th>\n",
       "      <th>HADM_ID</th>\n",
       "      <th>ADMITTIME</th>\n",
       "      <th>DISCHTIME</th>\n",
       "      <th>DEATHTIME</th>\n",
       "      <th>ADMISSION_TYPE</th>\n",
       "      <th>ADMISSION_LOCATION</th>\n",
       "      <th>DISCHARGE_LOCATION</th>\n",
       "      <th>INSURANCE</th>\n",
       "      <th>LANGUAGE</th>\n",
       "      <th>RELIGION</th>\n",
       "      <th>MARITAL_STATUS</th>\n",
       "      <th>ETHNICITY</th>\n",
       "      <th>EDREGTIME</th>\n",
       "      <th>EDOUTTIME</th>\n",
       "      <th>DIAGNOSIS</th>\n",
       "      <th>HOSPITAL_EXPIRE_FLAG</th>\n",
       "      <th>HAS_CHARTEVENTS_DATA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>2196-04-10 15:54:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>EMERGENCY ROOM ADMIT</td>\n",
       "      <td>DISC-TRAN CANCER/CHLDRN H</td>\n",
       "      <td>Private</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNOBTAINABLE</td>\n",
       "      <td>MARRIED</td>\n",
       "      <td>WHITE</td>\n",
       "      <td>2196-04-09 10:06:00</td>\n",
       "      <td>2196-04-09 13:24:00</td>\n",
       "      <td>BENZODIAZEPINE OVERDOSE</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>2153-09-08 19:10:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>PHYS REFERRAL/NORMAL DELI</td>\n",
       "      <td>HOME HEALTH CARE</td>\n",
       "      <td>Medicare</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CATHOLIC</td>\n",
       "      <td>MARRIED</td>\n",
       "      <td>WHITE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CORONARY ARTERY DISEASE\\CORONARY ARTERY BYPASS...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ROW_ID  SUBJECT_ID  HADM_ID            ADMITTIME            DISCHTIME  \\\n",
       "0      21          22   165315  2196-04-09 12:26:00  2196-04-10 15:54:00   \n",
       "1      22          23   152223  2153-09-03 07:15:00  2153-09-08 19:10:00   \n",
       "\n",
       "  DEATHTIME ADMISSION_TYPE         ADMISSION_LOCATION  \\\n",
       "0       NaN      EMERGENCY       EMERGENCY ROOM ADMIT   \n",
       "1       NaN       ELECTIVE  PHYS REFERRAL/NORMAL DELI   \n",
       "\n",
       "          DISCHARGE_LOCATION INSURANCE LANGUAGE      RELIGION MARITAL_STATUS  \\\n",
       "0  DISC-TRAN CANCER/CHLDRN H   Private      NaN  UNOBTAINABLE        MARRIED   \n",
       "1           HOME HEALTH CARE  Medicare      NaN      CATHOLIC        MARRIED   \n",
       "\n",
       "  ETHNICITY            EDREGTIME            EDOUTTIME  \\\n",
       "0     WHITE  2196-04-09 10:06:00  2196-04-09 13:24:00   \n",
       "1     WHITE                  NaN                  NaN   \n",
       "\n",
       "                                           DIAGNOSIS  HOSPITAL_EXPIRE_FLAG  \\\n",
       "0                            BENZODIAZEPINE OVERDOSE                     0   \n",
       "1  CORONARY ARTERY DISEASE\\CORONARY ARTERY BYPASS...                     0   \n",
       "\n",
       "   HAS_CHARTEVENTS_DATA  \n",
       "0                     1  \n",
       "1                     1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admissions = pd.read_csv('ADMISSIONS.csv.gz', compression='gzip')\n",
    "print(admissions.shape)\n",
    "admissions.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 58976 rows and 19 columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Columns of interest (or may be of interest) from the 'admissions' dataset include:\n",
    "- HOSPITAL_EXPIRE_FLAG\n",
    "- SUBJECT_ID\n",
    "- HADM_ID\n",
    "- ADMITTIME\n",
    "- DEATHTIME\n",
    "- ADMISSION_TYPE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 58976 entries, 0 to 58975\n",
      "Data columns (total 19 columns):\n",
      " #   Column                Non-Null Count  Dtype \n",
      "---  ------                --------------  ----- \n",
      " 0   ROW_ID                58976 non-null  int64 \n",
      " 1   SUBJECT_ID            58976 non-null  int64 \n",
      " 2   HADM_ID               58976 non-null  int64 \n",
      " 3   ADMITTIME             58976 non-null  object\n",
      " 4   DISCHTIME             58976 non-null  object\n",
      " 5   DEATHTIME             5854 non-null   object\n",
      " 6   ADMISSION_TYPE        58976 non-null  object\n",
      " 7   ADMISSION_LOCATION    58976 non-null  object\n",
      " 8   DISCHARGE_LOCATION    58976 non-null  object\n",
      " 9   INSURANCE             58976 non-null  object\n",
      " 10  LANGUAGE              33644 non-null  object\n",
      " 11  RELIGION              58518 non-null  object\n",
      " 12  MARITAL_STATUS        48848 non-null  object\n",
      " 13  ETHNICITY             58976 non-null  object\n",
      " 14  EDREGTIME             30877 non-null  object\n",
      " 15  EDOUTTIME             30877 non-null  object\n",
      " 16  DIAGNOSIS             58951 non-null  object\n",
      " 17  HOSPITAL_EXPIRE_FLAG  58976 non-null  int64 \n",
      " 18  HAS_CHARTEVENTS_DATA  58976 non-null  int64 \n",
      "dtypes: int64(5), object(14)\n",
      "memory usage: 8.5+ MB\n"
     ]
    }
   ],
   "source": [
    "# exploring the data to determine the datatypes, in particular, of the date columns.\n",
    "admissions.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, convert the dates to datetime format for processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of missing date admissions: 0\n",
      "Number of missing DEATHTIME: 53122\n"
     ]
    }
   ],
   "source": [
    "#convert ADMITTIME and DEATHTIME to datetime format. The errors='coerce' argument allows for missing values\n",
    "admissions.ADMITTIME = pd.to_datetime(admissions.ADMITTIME, format = '%Y-%m-%d %H:%M:%S', errors = 'coerce')\n",
    "admissions.DEATHTIME = pd.to_datetime(admissions.DEATHTIME, format = '%Y-%m-%d %H:%M:%S', errors = 'coerce')\n",
    "\n",
    "# check to see if there are any null dates\n",
    "print('Number of missing date admissions:', admissions.ADMITTIME.isnull().sum())\n",
    "print('Number of missing DEATHTIME:', admissions.DEATHTIME.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The next step is to add the target variable 'DEATH' which indicates whether or not a hospitalization resulted in death.\n",
    "# positive death=1/negative death=0\n",
    "\n",
    "#admissions['DEATH'] = admissions['DEATHTIME']>pd.Timestamp('00:00:00')\n",
    "#admissions.DEATH.value_counts()\n",
    "#print(admissions.DEATH.value_counts())\n",
    "#print(admissions.DEATH.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I later realized that the column \"HOSPITAL_EXPIRE_FLAG\" is same as the \"DEATH\" column that was created.\n",
    "# drop DEATH column\n",
    "#admissions.drop('DEATH', axis=1, inplace=True)\n",
    "#admissions.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    53122\n",
       "1     5854\n",
       "Name: HOSPITAL_EXPIRE_FLAG, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "admissions.HOSPITAL_EXPIRE_FLAG.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5,854 out of 58,976 hospital admissions resulted in death (roughly 10%). Therefore, the dataset is imbalanced."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The 'admissions' dataframe is ready to go! <br>\n",
    "<br>\n",
    "Next: Read in the caregiver notes dataset and get an overview of its rows and features.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ROW_ID</th>\n",
       "      <th>SUBJECT_ID</th>\n",
       "      <th>HADM_ID</th>\n",
       "      <th>CHARTDATE</th>\n",
       "      <th>CHARTTIME</th>\n",
       "      <th>STORETIME</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>DESCRIPTION</th>\n",
       "      <th>CGID</th>\n",
       "      <th>ISERROR</th>\n",
       "      <th>TEXT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>174</td>\n",
       "      <td>22532</td>\n",
       "      <td>167853.0</td>\n",
       "      <td>2151-08-04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Discharge summary</td>\n",
       "      <td>Report</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Admission Date:  [**2151-7-16**]       Dischar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>175</td>\n",
       "      <td>13702</td>\n",
       "      <td>107527.0</td>\n",
       "      <td>2118-06-14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Discharge summary</td>\n",
       "      <td>Report</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Admission Date:  [**2118-6-2**]       Discharg...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ROW_ID  SUBJECT_ID   HADM_ID   CHARTDATE CHARTTIME STORETIME  \\\n",
       "0     174       22532  167853.0  2151-08-04       NaN       NaN   \n",
       "1     175       13702  107527.0  2118-06-14       NaN       NaN   \n",
       "\n",
       "            CATEGORY DESCRIPTION  CGID  ISERROR  \\\n",
       "0  Discharge summary      Report   NaN      NaN   \n",
       "1  Discharge summary      Report   NaN      NaN   \n",
       "\n",
       "                                                TEXT  \n",
       "0  Admission Date:  [**2151-7-16**]       Dischar...  \n",
       "1  Admission Date:  [**2118-6-2**]       Discharg...  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Read in the caregiver notes dataset.\n",
    "\n",
    "notes = pd.read_csv('NOTEEVENTS.csv.gz', compression='gzip', low_memory=False)\n",
    "notes.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Columns of interest from the NOTES dataset:\n",
    "- SUBJECT_ID\n",
    "- HADM_ID\n",
    "- NOTES\n",
    "- CHARTDATE and CHARTTIME\n",
    "- CATEGORY\n",
    "- TEXT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2083180, 11)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "notes.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Nursing/other        822497\n",
       "Radiology            522279\n",
       "Nursing              223556\n",
       "ECG                  209051\n",
       "Physician            141624\n",
       "Discharge summary     59652\n",
       "Echo                  45794\n",
       "Respiratory           31739\n",
       "Nutrition              9418\n",
       "General                8301\n",
       "Rehab Services         5431\n",
       "Social Work            2670\n",
       "Case Management         967\n",
       "Pharmacy                103\n",
       "Consult                  98\n",
       "Name: CATEGORY, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing categories of caregiver notes to better understand the dataset.\n",
    "notes.CATEGORY.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2083180 entries, 0 to 2083179\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Dtype  \n",
      "---  ------       -----  \n",
      " 0   ROW_ID       int64  \n",
      " 1   SUBJECT_ID   int64  \n",
      " 2   HADM_ID      float64\n",
      " 3   CHARTDATE    object \n",
      " 4   CHARTTIME    object \n",
      " 5   STORETIME    object \n",
      " 6   CATEGORY     object \n",
      " 7   DESCRIPTION  object \n",
      " 8   CGID         float64\n",
      " 9   ISERROR      float64\n",
      " 10  TEXT         object \n",
      "dtypes: float64(3), int64(2), object(6)\n",
      "memory usage: 174.8+ MB\n"
     ]
    }
   ],
   "source": [
    "notes.info()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CHARTDATE records the date at which the note was charted. CHARTDATE will always have a time value of 00:00:00.\n",
    "\n",
    "CHARTTIME records the date and time at which the note was charted. If both CHARTDATE and CHARTTIME exist, then the date portions will be identical. All records have a CHARTDATE. A subset are missing CHARTTIME. More specifically, notes with a CATEGORY value of ‘Discharge Summary’, ‘ECG’, and ‘Echo’ never have a CHARTTIME, only CHARTDATE. Other categories almost always have both CHARTTIME and CHARTDATE, but there is a small amount of missing data for CHARTTIME (usually less than 0.5% of the total number of notes for that category)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of missing CHARTTIME: 316566\n",
      "Number of missing CHARTDATE: 0\n"
     ]
    }
   ],
   "source": [
    "#convert the chart dates and times into datetime format\n",
    "\n",
    "notes.CHARTTIME = pd.to_datetime(notes.CHARTTIME, format = '%Y-%m-%d %H:%M:%S', errors = 'coerce')\n",
    "notes.CHARTDATE = pd.to_datetime(notes.CHARTDATE, format = '%Y-%m-%d %H:%M:%S', errors = 'coerce')\n",
    "\n",
    "\n",
    "# check to see if there are any null dates\n",
    "print('Number of missing CHARTTIME:', notes.CHARTTIME.isnull().sum())\n",
    "print('Number of missing CHARTDATE:', notes.CHARTDATE.isnull().sum())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since there are so many missing CHARTTIME values, CHARTDATE will be used for processing and analysis (see below). Before analyzing further, the dataframes will be merged."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are  1851959 rows and  9 columns.\n"
     ]
    }
   ],
   "source": [
    "# Merging the 'admissions' and 'notes' together. A left merge is used so that all rows for hospital admissions are included\n",
    "# and any caregiver notes that are not associated with a hospital admission are dropped.\n",
    "df=pd.merge(admissions[['SUBJECT_ID', 'HADM_ID', 'ADMITTIME', 'HOSPITAL_EXPIRE_FLAG', 'ADMISSION_TYPE', 'DEATHTIME']],\\\n",
    "            notes[['SUBJECT_ID', 'HADM_ID', 'CHARTDATE', 'CATEGORY','TEXT']], \\\n",
    "            on=('HADM_ID','SUBJECT_ID') , how='left', suffixes=('adm','note'))\n",
    "print('There are ', len(df), 'rows and ',len(df.columns), 'columns.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['SUBJECT_ID',\n",
       " 'HADM_ID',\n",
       " 'ADMITTIME',\n",
       " 'HOSPITAL_EXPIRE_FLAG',\n",
       " 'ADMISSION_TYPE',\n",
       " 'DEATHTIME',\n",
       " 'CHARTDATE',\n",
       " 'CATEGORY',\n",
       " 'TEXT']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next a new column ENDTIME will be created. This will indicate the when to end note collection for analysis - i.e., 24 hours after ADMITTIME or at time of death - whichever is sooner.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SUBJECT_ID</th>\n",
       "      <th>HADM_ID</th>\n",
       "      <th>ADMITTIME</th>\n",
       "      <th>HOSPITAL_EXPIRE_FLAG</th>\n",
       "      <th>ADMISSION_TYPE</th>\n",
       "      <th>DEATHTIME</th>\n",
       "      <th>CHARTDATE</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>TEXT</th>\n",
       "      <th>ADMIT+24</th>\n",
       "      <th>ENDTIME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-10</td>\n",
       "      <td>Discharge summary</td>\n",
       "      <td>Admission Date:  [**2196-4-9**]       Discharg...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-09</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Normal sinus rhythm. Non-diagnostic repolariza...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-09</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Normal sinus rhythm without diagnostic abnorma...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-10</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2196-4-10**] 11:52 PM\\n CHEST (PORTABLE AP)...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-09</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2196-4-9**] 10:19 AM\\n CT HEAD W/O CONTRAST...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-09</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2196-4-9**] 10:40 AM\\n CHEST (PORTABLE AP) ...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-09</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>MICU/SICU NURSING ADMISSION NOTE\\n     Admitte...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-09</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>Resp Care\\npt received from eu s/p intubation ...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-10</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>S/MICU Nursing Progress Note\\nPt extubated at ...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>22</td>\n",
       "      <td>165315</td>\n",
       "      <td>2196-04-09 12:26:00</td>\n",
       "      <td>0</td>\n",
       "      <td>EMERGENCY</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2196-04-10</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>PT TRANSFER NOTE PLEASE REFER TO ADMIT NOTE [*...</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "      <td>2196-04-10 12:26:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-08</td>\n",
       "      <td>Discharge summary</td>\n",
       "      <td>Admission Date:  [**2153-9-3**]              D...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-04</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Sinus rhythm\\nMarked left axis deviation\\nRBBB...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-03</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Sinus rhythm\\nSupraventricular extrasystoles\\n...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-03</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Sinus rhythm\\nMarked left axis deviation\\nRBBB...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-03</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Sinus arrhythmia\\nLeft axis deviation\\nIV cond...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-03</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2153-9-3**] 1:26 PM\\n CHEST (PORTABLE AP)  ...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-04</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2153-9-4**] 9:16 AM\\n CHEST (PORTABLE AP)  ...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-03</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>csru update\\ncvs: aiming for sbp 90-110, neo t...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-03</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>OP DAY CABG X 4\\n3 NOTED 5 BEAT NARROW COMPLEX...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>23</td>\n",
       "      <td>152223</td>\n",
       "      <td>2153-09-03 07:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>ELECTIVE</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2153-09-04</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>CSRU NSG:\\n\\nNEURO:  A&amp;OX3, appropriate, speec...</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "      <td>2153-09-04 07:15:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    SUBJECT_ID  HADM_ID           ADMITTIME  HOSPITAL_EXPIRE_FLAG  \\\n",
       "0           22   165315 2196-04-09 12:26:00                     0   \n",
       "1           22   165315 2196-04-09 12:26:00                     0   \n",
       "2           22   165315 2196-04-09 12:26:00                     0   \n",
       "3           22   165315 2196-04-09 12:26:00                     0   \n",
       "4           22   165315 2196-04-09 12:26:00                     0   \n",
       "5           22   165315 2196-04-09 12:26:00                     0   \n",
       "6           22   165315 2196-04-09 12:26:00                     0   \n",
       "7           22   165315 2196-04-09 12:26:00                     0   \n",
       "8           22   165315 2196-04-09 12:26:00                     0   \n",
       "9           22   165315 2196-04-09 12:26:00                     0   \n",
       "10          23   152223 2153-09-03 07:15:00                     0   \n",
       "11          23   152223 2153-09-03 07:15:00                     0   \n",
       "12          23   152223 2153-09-03 07:15:00                     0   \n",
       "13          23   152223 2153-09-03 07:15:00                     0   \n",
       "14          23   152223 2153-09-03 07:15:00                     0   \n",
       "15          23   152223 2153-09-03 07:15:00                     0   \n",
       "16          23   152223 2153-09-03 07:15:00                     0   \n",
       "17          23   152223 2153-09-03 07:15:00                     0   \n",
       "18          23   152223 2153-09-03 07:15:00                     0   \n",
       "19          23   152223 2153-09-03 07:15:00                     0   \n",
       "\n",
       "   ADMISSION_TYPE DEATHTIME  CHARTDATE           CATEGORY  \\\n",
       "0       EMERGENCY       NaT 2196-04-10  Discharge summary   \n",
       "1       EMERGENCY       NaT 2196-04-09                ECG   \n",
       "2       EMERGENCY       NaT 2196-04-09                ECG   \n",
       "3       EMERGENCY       NaT 2196-04-10          Radiology   \n",
       "4       EMERGENCY       NaT 2196-04-09          Radiology   \n",
       "5       EMERGENCY       NaT 2196-04-09          Radiology   \n",
       "6       EMERGENCY       NaT 2196-04-09      Nursing/other   \n",
       "7       EMERGENCY       NaT 2196-04-09      Nursing/other   \n",
       "8       EMERGENCY       NaT 2196-04-10      Nursing/other   \n",
       "9       EMERGENCY       NaT 2196-04-10      Nursing/other   \n",
       "10       ELECTIVE       NaT 2153-09-08  Discharge summary   \n",
       "11       ELECTIVE       NaT 2153-09-04                ECG   \n",
       "12       ELECTIVE       NaT 2153-09-03                ECG   \n",
       "13       ELECTIVE       NaT 2153-09-03                ECG   \n",
       "14       ELECTIVE       NaT 2153-09-03                ECG   \n",
       "15       ELECTIVE       NaT 2153-09-03          Radiology   \n",
       "16       ELECTIVE       NaT 2153-09-04          Radiology   \n",
       "17       ELECTIVE       NaT 2153-09-03      Nursing/other   \n",
       "18       ELECTIVE       NaT 2153-09-03      Nursing/other   \n",
       "19       ELECTIVE       NaT 2153-09-04      Nursing/other   \n",
       "\n",
       "                                                 TEXT            ADMIT+24  \\\n",
       "0   Admission Date:  [**2196-4-9**]       Discharg... 2196-04-10 12:26:00   \n",
       "1   Normal sinus rhythm. Non-diagnostic repolariza... 2196-04-10 12:26:00   \n",
       "2   Normal sinus rhythm without diagnostic abnorma... 2196-04-10 12:26:00   \n",
       "3   [**2196-4-10**] 11:52 PM\\n CHEST (PORTABLE AP)... 2196-04-10 12:26:00   \n",
       "4   [**2196-4-9**] 10:19 AM\\n CT HEAD W/O CONTRAST... 2196-04-10 12:26:00   \n",
       "5   [**2196-4-9**] 10:40 AM\\n CHEST (PORTABLE AP) ... 2196-04-10 12:26:00   \n",
       "6   MICU/SICU NURSING ADMISSION NOTE\\n     Admitte... 2196-04-10 12:26:00   \n",
       "7   Resp Care\\npt received from eu s/p intubation ... 2196-04-10 12:26:00   \n",
       "8   S/MICU Nursing Progress Note\\nPt extubated at ... 2196-04-10 12:26:00   \n",
       "9   PT TRANSFER NOTE PLEASE REFER TO ADMIT NOTE [*... 2196-04-10 12:26:00   \n",
       "10  Admission Date:  [**2153-9-3**]              D... 2153-09-04 07:15:00   \n",
       "11  Sinus rhythm\\nMarked left axis deviation\\nRBBB... 2153-09-04 07:15:00   \n",
       "12  Sinus rhythm\\nSupraventricular extrasystoles\\n... 2153-09-04 07:15:00   \n",
       "13  Sinus rhythm\\nMarked left axis deviation\\nRBBB... 2153-09-04 07:15:00   \n",
       "14  Sinus arrhythmia\\nLeft axis deviation\\nIV cond... 2153-09-04 07:15:00   \n",
       "15  [**2153-9-3**] 1:26 PM\\n CHEST (PORTABLE AP)  ... 2153-09-04 07:15:00   \n",
       "16  [**2153-9-4**] 9:16 AM\\n CHEST (PORTABLE AP)  ... 2153-09-04 07:15:00   \n",
       "17  csru update\\ncvs: aiming for sbp 90-110, neo t... 2153-09-04 07:15:00   \n",
       "18  OP DAY CABG X 4\\n3 NOTED 5 BEAT NARROW COMPLEX... 2153-09-04 07:15:00   \n",
       "19  CSRU NSG:\\n\\nNEURO:  A&OX3, appropriate, speec... 2153-09-04 07:15:00   \n",
       "\n",
       "               ENDTIME  \n",
       "0  2196-04-10 12:26:00  \n",
       "1  2196-04-10 12:26:00  \n",
       "2  2196-04-10 12:26:00  \n",
       "3  2196-04-10 12:26:00  \n",
       "4  2196-04-10 12:26:00  \n",
       "5  2196-04-10 12:26:00  \n",
       "6  2196-04-10 12:26:00  \n",
       "7  2196-04-10 12:26:00  \n",
       "8  2196-04-10 12:26:00  \n",
       "9  2196-04-10 12:26:00  \n",
       "10 2153-09-04 07:15:00  \n",
       "11 2153-09-04 07:15:00  \n",
       "12 2153-09-04 07:15:00  \n",
       "13 2153-09-04 07:15:00  \n",
       "14 2153-09-04 07:15:00  \n",
       "15 2153-09-04 07:15:00  \n",
       "16 2153-09-04 07:15:00  \n",
       "17 2153-09-04 07:15:00  \n",
       "18 2153-09-04 07:15:00  \n",
       "19 2153-09-04 07:15:00  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ADMIT+24'] = df['ADMITTIME'] + pd.DateOffset(days=1)\n",
    "df['ENDTIME'] = df['ADMIT+24']\n",
    "\n",
    "df.ENDTIME = np.where(df['DEATHTIME'] < df['ENDTIME'], df['DEATHTIME']+pd.DateOffset(hours=-2), df['ENDTIME'])\n",
    "df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1851959, 11)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#update dataframe to only include notes taken within 24 hours of admission \n",
    "#or up until 2 hours before time of death if patient expired in the first 24 hours.\n",
    "\n",
    "df2 = df[df['CHARTDATE'] <= df['ENDTIME']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(444601, 11)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving the merged dataframe.\n",
    "df2.to_csv('df2.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### If restarting code, start with line below to begin with merged dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy\n",
    "df2 = pd.read_csv('df2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(444228, 11)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#find out which samples died before admission and remove them from the dataframe. Save as new dataframe.\n",
    "df3 = df2.loc[df2['ENDTIME'] > df2['ADMITTIME']]\n",
    "#businesses = businesses.loc[businesses['categories'] == 'Restaurants']\n",
    "df3.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NaN                    437727\n",
       "2158-04-10 17:15:00        37\n",
       "2114-02-22 07:28:00        36\n",
       "2191-01-31 15:25:00        34\n",
       "2147-12-19 10:48:00        31\n",
       "                        ...  \n",
       "2120-01-02 02:08:00         1\n",
       "2153-05-27 09:45:00         1\n",
       "2194-10-07 00:35:00         1\n",
       "2195-09-23 00:40:00         1\n",
       "2194-09-24 12:00:00         1\n",
       "Name: diedin24, Length: 887, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Locate the patients who died within 24 hours of admission\n",
    "\n",
    "df2['diedin24'] = np.where(df2['DEATHTIME'] <= df2['ADMIT+24'], df2['DEATHTIME'], 'NaN')\n",
    "df2.diedin24.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 444228 entries, 0 to 444600\n",
      "Data columns (total 11 columns):\n",
      " #   Column                Non-Null Count   Dtype \n",
      "---  ------                --------------   ----- \n",
      " 0   SUBJECT_ID            444228 non-null  int64 \n",
      " 1   HADM_ID               444228 non-null  int64 \n",
      " 2   ADMITTIME             444228 non-null  object\n",
      " 3   HOSPITAL_EXPIRE_FLAG  444228 non-null  int64 \n",
      " 4   ADMISSION_TYPE        444228 non-null  object\n",
      " 5   DEATHTIME             48960 non-null   object\n",
      " 6   CHARTDATE             444228 non-null  object\n",
      " 7   CATEGORY              444228 non-null  object\n",
      " 8   TEXT                  444228 non-null  object\n",
      " 9   ADMIT+24              444228 non-null  object\n",
      " 10  ENDTIME               444228 non-null  object\n",
      "dtypes: int64(3), object(8)\n",
      "memory usage: 40.7+ MB\n"
     ]
    }
   ],
   "source": [
    "#confirming data types and that there are no null values\n",
    "df3.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reordering the columns\n",
    "df3 = df3[['HADM_ID', 'SUBJECT_ID', 'ADMITTIME', 'HOSPITAL_EXPIRE_FLAG', 'CHARTDATE', 'CATEGORY', 'TEXT', 'ENDTIME']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Radiology            131780\n",
       "Nursing/other        121499\n",
       "ECG                   70415\n",
       "Nursing               56219\n",
       "Physician             36577\n",
       "Echo                  14635\n",
       "Respiratory            5121\n",
       "Discharge summary      2519\n",
       "General                2515\n",
       "Nutrition              1482\n",
       "Social Work             650\n",
       "Rehab Services          496\n",
       "Case Management         265\n",
       "Consult                  44\n",
       "Pharmacy                 11\n",
       "Name: CATEGORY, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Having a look at the quantities of different categories of caregiver notes from the first 24 hours of admission. \n",
    "#For now include all categories. This may be somewhere that can be adjusted (i.e., include only notes from specific categories)\n",
    "# based on the initial results of the machine learning model. Another option to consider is to combine all the text for each admission\n",
    "# into one text row.\n",
    "df3.CATEGORY.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last step before beginning data analysis is to split the data into training and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preparing data further for ML model fitting, separating target variable from features\n",
    "\n",
    "X = df3.drop(['HOSPITAL_EXPIRE_FLAG'], axis='columns') #feature columns\n",
    "y = df3.HOSPITAL_EXPIRE_FLAG #target variable\n",
    "\n",
    "# Split the data into train and test sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, shuffle=True, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    395268\n",
       "1     48960\n",
       "Name: HOSPITAL_EXPIRE_FLAG, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Confirming target variable counts\n",
    "y.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "48960 out of 444528 patients expired while in the ICU."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# shuffle dataset in order to randomize all of the samples\n",
    "df4 = df3.sample(n = len(df3), random_state = 42)\n",
    "df4 = df4.reset_index(drop = True) #resetting index for the newly shuffled dataset\n",
    "\n",
    "df_valid_test=df4.sample(frac=0.30,random_state=42) # Save 30% of the data as validation data.\n",
    "df_test = df_valid_test.sample(frac = 0.5, random_state = 42) #Of the validation data, 50% is set aside for testing \n",
    "df_valid = df_valid_test.drop(df_test.index) #dropping the index for the validation data\n",
    "\n",
    "df_train_all=df4.drop(df_valid_test.index) # remove the rows used for validation; We are left with the rest of the data which will be used for training\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HADM_ID</th>\n",
       "      <th>SUBJECT_ID</th>\n",
       "      <th>ADMITTIME</th>\n",
       "      <th>HOSPITAL_EXPIRE_FLAG</th>\n",
       "      <th>CHARTDATE</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>TEXT</th>\n",
       "      <th>ENDTIME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>129733</td>\n",
       "      <td>31458</td>\n",
       "      <td>2173-11-07 01:42:00</td>\n",
       "      <td>0</td>\n",
       "      <td>2173-11-07 00:00:00</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>Umbilical Line Placement\\nIndication: central ...</td>\n",
       "      <td>2173-11-08 01:42:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>186254</td>\n",
       "      <td>87687</td>\n",
       "      <td>2118-11-04 16:18:00</td>\n",
       "      <td>0</td>\n",
       "      <td>2118-11-04 00:00:00</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Sinus tachycardia suggested with frequent atri...</td>\n",
       "      <td>2118-11-05 16:18:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>124768</td>\n",
       "      <td>13912</td>\n",
       "      <td>2172-09-09 22:24:00</td>\n",
       "      <td>0</td>\n",
       "      <td>2172-09-09 00:00:00</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2172-9-9**] 8:51 PM\\n CTA NECK W&amp;W/OC &amp; REC...</td>\n",
       "      <td>2172-09-10 22:24:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>177614</td>\n",
       "      <td>26509</td>\n",
       "      <td>2121-03-11 10:15:00</td>\n",
       "      <td>0</td>\n",
       "      <td>2121-03-12 00:00:00</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2121-3-12**] 10:11 AM\\n UGI SGL CONTRAST W/...</td>\n",
       "      <td>2121-03-12 10:15:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>158867</td>\n",
       "      <td>32078</td>\n",
       "      <td>2183-08-06 21:09:00</td>\n",
       "      <td>0</td>\n",
       "      <td>2183-08-06 00:00:00</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Sinus rhythm with borderline sinus tachycardia...</td>\n",
       "      <td>2183-08-07 21:09:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HADM_ID  SUBJECT_ID            ADMITTIME  HOSPITAL_EXPIRE_FLAG  \\\n",
       "0   129733       31458  2173-11-07 01:42:00                     0   \n",
       "1   186254       87687  2118-11-04 16:18:00                     0   \n",
       "3   124768       13912  2172-09-09 22:24:00                     0   \n",
       "4   177614       26509  2121-03-11 10:15:00                     0   \n",
       "5   158867       32078  2183-08-06 21:09:00                     0   \n",
       "\n",
       "             CHARTDATE       CATEGORY  \\\n",
       "0  2173-11-07 00:00:00  Nursing/other   \n",
       "1  2118-11-04 00:00:00            ECG   \n",
       "3  2172-09-09 00:00:00      Radiology   \n",
       "4  2121-03-12 00:00:00      Radiology   \n",
       "5  2183-08-06 00:00:00            ECG   \n",
       "\n",
       "                                                TEXT              ENDTIME  \n",
       "0  Umbilical Line Placement\\nIndication: central ...  2173-11-08 01:42:00  \n",
       "1  Sinus tachycardia suggested with frequent atri...  2118-11-05 16:18:00  \n",
       "3  [**2172-9-9**] 8:51 PM\\n CTA NECK W&W/OC & REC...  2172-09-10 22:24:00  \n",
       "4  [**2121-3-12**] 10:11 AM\\n UGI SGL CONTRAST W/...  2121-03-12 10:15:00  \n",
       "5  Sinus rhythm with borderline sinus tachycardia...  2183-08-07 21:09:00  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train_all.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, working with the training data, split the data into 2 categories based on mortality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are  34245 positive samples and  276715 negative samples.\n",
      "Percent positive samples:  11.01 %\n"
     ]
    }
   ],
   "source": [
    "# split the training data into positive (death) and negative (no death)\n",
    "positive = df_train_all.HOSPITAL_EXPIRE_FLAG == 1\n",
    "df_train_pos = df_train_all.loc[positive]\n",
    "df_train_neg = df_train_all.loc[~positive]\n",
    "print('There are ', len(df_train_pos), 'positive samples and ', len(df_train_neg), 'negative samples.')\n",
    "print('Percent positive samples: ', round(len(df_train_pos)*100/len(df_train_all),2),'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is an imbalance in positive vs negative cases, which would be expected in this dataset. Therefore balancing the data is needed, so that the machine learning model does not always predict negative (no death). Sub-sampling the negative group is one method of doing this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sub-sample negatives so there are an equal number of positive and negative samples.\n",
    "df_train_neg = df_train_neg.sample(n=len(df_train_pos), random_state=42)\n",
    "\n",
    "# merge the positive and negative samples into the final training set\n",
    "df_train_final = pd.concat([df_train_pos, df_train_neg],axis = 0)\n",
    "\n",
    "# shuffle the order of training samples \n",
    "df_train_final = df_train_final.sample(n = len(df_train_final), random_state = 42).reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "68490"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_train_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2: Preprocess text data using Bag of Words model.\n",
    "#### What is Bag of Words?\n",
    "<br>\n",
    "Bag of Words is a method for extracting features from the text for use in machine learning algorithms. Basically, it breaks up a text into individual words, then counts how often each word occurs.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'[**2116-11-9**] 1:09 PM\\n CHEST (PORTABLE AP); -76 BY SAME PHYSICIAN                      [**Name Initial (PRE) 7**] # [**Clip Number (Radiology) 51803**]\\n Reason: ? L side pnthx\\n Admitting Diagnosis: SDH/SAH\\n ______________________________________________________________________________\\n [**Hospital 2**] MEDICAL CONDITION:\\n  22 year old man with [**Month (only) 1158**] O2 sats and hypotension\\n REASON FOR THIS EXAMINATION:\\n  ? L side pnthx\\n ______________________________________________________________________________\\n PROVISIONAL FINDINGS IMPRESSION (PFI): DLnc MON [**2116-11-9**] 7:38 PM\\n  New right lower lobe opacity:  Aspiration/atelectasis.  Discussed with Dr.\\n  [**Last Name (STitle) 1586**] over the phone by Dr. [**Last Name (STitle) 236**].\\n ______________________________________________________________________________\\n                                 FINAL REPORT\\n REASON FOR EXAMINATION:  Hypertension.\\n\\n Portable AP chest radiograph was compared to [**2116-11-9**] obtained at\\n 09:00 a.m.\\n\\n There is newly developed right lower lung opacity obscuring the right\\n hemidiaphragm that developed during the interval couple of hours and might\\n represent newly developed aspiration/atelectasis.  The rest of the lungs are\\n unremarkable.  The ET tube tip is 5.5 cm above the carina.  The NG tube tip is\\n in the stomach.  The left subclavian line tip is in mid SVC.  No evidence of\\n pneumothorax is demonstrated, but note is made that the lung apices are\\n obscured by external devices.\\n\\n\\n'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#viewing an example row of the text column\n",
    "df_train_final.TEXT[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The text above shows that it needs some pre-processing (mainly removing the new line command ('\\n'). One way to do this is to create a function to preprocess the text. This way the original data won't be modified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess_text(df4):\n",
    "    # This function preprocesses the text by replacing new lines ('\\n')  with a space.\n",
    "    df4.TEXT = df4.TEXT.str.replace('\\n',' ')\n",
    "    return df4\n",
    "# preprocess the text to deal with known issue\n",
    "df_train_final = preprocess_text(df_train_final)\n",
    "df_valid = preprocess_text(df_valid)\n",
    "df_test = preprocess_text(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'[**2116-11-9**] 1:09 PM  CHEST (PORTABLE AP); -76 BY SAME PHYSICIAN                      [**Name Initial (PRE) 7**] # [**Clip Number (Radiology) 51803**]  Reason: ? L side pnthx  Admitting Diagnosis: SDH/SAH  ______________________________________________________________________________  [**Hospital 2**] MEDICAL CONDITION:   22 year old man with [**Month (only) 1158**] O2 sats and hypotension  REASON FOR THIS EXAMINATION:   ? L side pnthx  ______________________________________________________________________________  PROVISIONAL FINDINGS IMPRESSION (PFI): DLnc MON [**2116-11-9**] 7:38 PM   New right lower lobe opacity:  Aspiration/atelectasis.  Discussed with Dr.   [**Last Name (STitle) 1586**] over the phone by Dr. [**Last Name (STitle) 236**].  ______________________________________________________________________________                                  FINAL REPORT  REASON FOR EXAMINATION:  Hypertension.   Portable AP chest radiograph was compared to [**2116-11-9**] obtained at  09:00 a.m.   There is newly developed right lower lung opacity obscuring the right  hemidiaphragm that developed during the interval couple of hours and might  represent newly developed aspiration/atelectasis.  The rest of the lungs are  unremarkable.  The ET tube tip is 5.5 cm above the carina.  The NG tube tip is  in the stomach.  The left subclavian line tip is in mid SVC.  No evidence of  pneumothorax is demonstrated, but note is made that the lung apices are  obscured by external devices.   '"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train_final.TEXT[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now import Python's Natural Language Toolkit (NLTK) and other necessary modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk import word_tokenize\n",
    "import string # String module provides tools to manipulate strings\n",
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next create a function to separate the text data into tokens (this is called tokenization). Tokens created here will be used to make a vocabulary (set of unique tokens) to be used as a feature for the model. All tokens or top K tokens can be used "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def text_tokenizer(text): # create a function that will tokenize the text, and also remove punctuation and numbers\n",
    "    \n",
    "    punc_list = string.punctuation #create list of punctuation marks\n",
    "    number_list=string.digits #create list of numbers\n",
    "    num_punc_list = number_list + punc_list #combine the lists together\n",
    "    t = str.maketrans(dict.fromkeys(num_punc_list, \" \")) # replace punctuation and numbers with spaces\n",
    "    text = text.lower().translate(t) #lowercase all words\n",
    "    tokens = word_tokenize(text) #tokenize the text \n",
    "    return tokens"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that tokens can be created from the text, CountVectorizer will turn these tokens into number features to be used in the machine learning model. But first a list of stopwords will be created so that the machine can ignore these words when processing the tokens."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\caras\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "nltk.download('stopwords')\n",
    "\n",
    "stopwords = set(stopwords.words('english')) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\caras\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "CountVectorizer(max_features=3000,\n",
       "                stop_words={'a', 'about', 'above', 'after', 'again', 'against',\n",
       "                            'ain', 'all', 'am', 'an', 'and', 'any', 'are',\n",
       "                            'aren', \"aren't\", 'as', 'at', 'be', 'because',\n",
       "                            'been', 'before', 'being', 'below', 'between',\n",
       "                            'both', 'but', 'by', 'can', 'couldn', \"couldn't\", ...},\n",
       "                tokenizer=<function text_tokenizer at 0x000001C75AB950D0>)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "# fit our vectorizer. \n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vect = CountVectorizer(max_features = 3000, tokenizer = text_tokenizer, stop_words = stopwords)\n",
    "vect.fit(df_train_final.TEXT.values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'nsg': 1802, 'admit': 50, 'note': 1790, 'pt': 2138, 'male': 1573, 'hospital': 1225, 'ward': 2927, 'name': 1724, 'today': 2731, 'mra': 1695, 'lt': 1540, 'leg': 1469, 'hx': 1240, 'cva': 634, 'tia': 2712, 'residual': 2283, 'sided': 2446, 'weakness': 2938, 'numbness': 1808, 'car': 372, 'alone': 87, 'witnessed': 2971, 'wall': 2924, 'taken': 2650, 'er': 907, 'gcs': 1108, 'became': 262, 'hypotensive': 1264, 'sbp': 2373, 'given': 1123, 'bolus': 309, 'ct': 623, 'grossly': 1151, 'heme': 1191, 'exp': 950, 'lap': 1443, 'repair': 2257, 'lg': 1489, 'mesenteric': 1632, 'bleed': 298, 'vessel': 2893, 'bladder': 296, 'liver': 1512, 'abdomen': 3, 'left': 1467, 'open': 1851, 'jp': 1409, 'x': 2985, 'covered': 605, 'dsg': 820, 'l': 1427, 'u': 2809, 'lr': 1538, 'sicu': 2444, 'ed': 847, 'pmh': 2016, 'sh': 2430, 'nkda': 1769, 'cad': 355, 'p': 1890, 'mi': 1642, 'h': 1162, 'rt': 2344, 'frontal': 1083, 'bilat': 282, 'central': 414, 'artery': 179, 'occlusion': 1831, 'lumbar': 1543, 'syncope': 2633, 'meds': 1622, 'asa': 181, 'ativan': 205, 'arrived': 174, 'pm': 2015, 'unstable': 2834, 'tachy': 2644, 'hypothermic': 1266, 'bld': 297, 'products': 2106, 'attempting': 215, 'correct': 592, 'coagulopathy': 479, 'draining': 802, 'amts': 105, 'ros': 2334, 'n': 1721, 'sedated': 2395, 'mso': 1699, 'requiring': 2280, 'amt': 104, 'mg': 1641, 'first': 1036, 'hrs': 1233, 'started': 2532, 'gtt': 1155, 'easily': 839, 'mae': 1559, 'light': 1492, 'perrl': 1974, 'mm': 1663, 'brisk': 336, 'prn': 2096, 'cv': 633, 'nsr': 1803, 'st': 2524, 'pvc': 2155, 'episode': 903, 'resolved': 2285, 'replacement': 2261, 'k': 1416, 'repleted': 2263, 'currently': 631, 'dobutamine': 783, 'maintain': 1564, 'ci': 443, 'mcg': 1600, 'kg': 1421, 'elevated': 864, 'pap': 1915, 'cvp': 636, 'teens': 2666, 'wedge': 2943, 'noted': 1791, 'depression': 695, 'lead': 1461, 'tele': 2668, 'ekg': 860, 'done': 787, 'confirmed': 541, 'ck': 451, 'arm': 167, 'syndrome': 2634, 'pressures': 2088, 'hand': 1165, 'cool': 581, 'palp': 1905, 'pp': 2054, 'tee': 2665, 'ef': 851, 'abd': 2, 'sxn': 2629, 'immediately': 1295, 'drained': 801, 'r': 2174, 'simv': 2458, 'peep': 1949, 'lungs': 1546, 'course': 602, 'diminished': 749, 'bases': 255, 'min': 1654, 'tinged': 2718, 'sec': 2390, 'pip': 1994, 'increasing': 1314, 'becomes': 264, 'distended': 769, 'change': 420, 'sats': 2368, 'significant': 2452, 'met': 1633, 'acidosis': 25, 'slowly': 2481, 'resuscitation': 2303, 'renal': 2255, 'urine': 2844, 'clear': 457, 'yellow': 2990, 'qs': 2163, 'gi': 1119, 'ngt': 1761, 'drainage': 800, 'absent': 15, 'bs': 347, 'trauma': 2775, 'aware': 233, 'transfused': 2767, 'plt': 2013, 'dic': 726, 'picture': 1992, 'id': 1279, 'temp': 2671, 'hugger': 1237, 'via': 2897, 'level': 1480, 'one': 1841, 'warmer': 2930, 'flagyl': 1041, 'levaquin': 1479, 'endo': 883, 'ss': 2523, 'ordered': 1860, 'coverage': 604, 'ni': 1763, 'son': 2496, 'dr': 798, 'namepattern': 1726, 'known': 1425, 'lastname': 1449, 'tomorrow': 2740, 'updated': 2839, 'last': 1448, 'stitle': 2557, 'phone': 1985, 'wife': 2960, 'dementia': 683, 'called': 363, 'issues': 1398, 'hd': 1175, 'mvc': 1715, 'cont': 560, 'chest': 431, 'portable': 2035, 'ap': 138, 'physician': 1989, 'initial': 1345, 'pre': 2061, 'clip': 463, 'number': 1807, 'radiology': 2181, 'reason': 2199, 'side': 2445, 'admitting': 52, 'diagnosis': 718, 'sdh': 2389, 'sah': 2363, 'medical': 1617, 'condition': 537, 'year': 2988, 'old': 1837, 'man': 1576, 'month': 1680, 'hypotension': 1263, 'examination': 942, 'provisional': 2131, 'findings': 1031, 'impression': 1297, 'pfi': 1981, 'mon': 1673, 'new': 1756, 'right': 2322, 'lower': 1536, 'lobe': 1519, 'opacity': 1850, 'aspiration': 189, 'atelectasis': 201, 'discussed': 757, 'final': 1029, 'report': 2266, 'hypertension': 1252, 'radiograph': 2178, 'compared': 515, 'obtained': 1824, 'newly': 1758, 'developed': 709, 'lung': 1545, 'hemidiaphragm': 1192, 'interval': 1373, 'hours': 1228, 'might': 1651, 'represent': 2272, 'rest': 2294, 'unremarkable': 2832, 'et': 916, 'tube': 2795, 'tip': 2720, 'cm': 472, 'carina': 387, 'ng': 1760, 'stomach': 2558, 'subclavian': 2577, 'line': 1500, 'mid': 1646, 'svc': 2619, 'evidence': 935, 'pneumothorax': 2025, 'demonstrated': 686, 'made': 1558, 'apices': 142, 'external': 961, 'indeterminate': 1316, 'slight': 2478, 'bundle': 350, 'branch': 326, 'block': 300, 'may': 1597, 'sinus': 2462, 'premature': 2070, 'atrial': 208, 'fibrillation': 1019, 'multifocal': 1704, 'tachycardia': 2645, 'baseline': 254, 'rhythm': 2319, 'previous': 2092, 'tracing': 2760, 'present': 2077, 'chief': 433, 'complaint': 520, 'transfer': 2763, 'hpi': 1231, 'patient': 1935, 'multiple': 1707, 'problems': 2100, 'including': 1310, 'history': 1217, 'chronic': 442, 'kidney': 1422, 'disease': 759, 'stage': 2527, 'iv': 1400, 'secondary': 2392, 'presumed': 2089, 'endocarditis': 884, 'disorder': 761, 'admitted': 51, 'treatment': 2779, 'bacteremia': 242, 'week': 2944, 'hip': 1215, 'fracture': 1074, 'place': 1999, 'complicated': 527, 'major': 1568, 'gastrointestinal': 1104, 'duodenal': 825, 'severe': 2426, 'anasarca': 108, 'less': 1475, 'alert': 80, 'service': 2420, 'following': 1062, 'continued': 566, 'diarrhea': 724, 'recent': 2205, 'colitis': 491, 'treated': 2778, 'found': 1071, 'positive': 2043, 'also': 90, 'urinary': 2843, 'tract': 2762, 'infection': 1328, 'culture': 627, 'volume': 2915, 'metabolic': 1634, 'blood': 302, 'aggressive': 65, 'fluid': 1050, 'hydration': 1242, 'transferred': 2765, 'icu': 1278, 'levophed': 1484, 'well': 2948, 'increased': 1313, 'antibiotic': 128, 'po': 2026, 'vanc': 2862, 'cdiff': 405, 'afib': 60, 'w': 2922, 'rvr': 2357, 'zosyn': 2999, 'broad': 337, 'setting': 2423, 'septic': 2415, 'shock': 2434, 'cipro': 444, 'uti': 2852, 'afebrile': 59, 'pressors': 2086, 'several': 2425, 'days': 654, 'however': 1230, 'pressure': 2087, 'thought': 2703, 'low': 1535, 'tolerate': 2736, 'arrival': 173, 'states': 2538, 'feels': 1000, 'mildly': 1653, 'sob': 2489, 'denies': 690, 'cough': 597, 'pain': 1900, 'f': 972, 'c': 352, 'v': 2854, 'records': 2217, 'allergies': 84, 'diabetes': 715, 'base': 252, 'oral': 1856, 'hcl': 1169, 'unknown': 2829, 'dose': 793, 'antibiotics': 129, 'infusions': 1343, 'heparin': 1203, 'sodium': 2491, 'units': 2828, 'hour': 1227, 'medications': 1620, 'ciprofloxacin': 445, 'q': 2158, 'grams': 1144, 'vancomycin': 2864, 'gram': 1143, 'daily': 646, 'vanco': 2863, 'ml': 1662, 'b': 238, 'omeprazole': 1839, 'shortness': 2437, 'breath': 331, 'tylenol': 2807, 'temperature': 2672, 'greater': 1147, 'atrovent': 212, 'acid': 24, 'oxycodone': 1887, 'sr': 2522, 'release': 2244, 'amiodarone': 97, 'around': 169, 'normal': 1785, 'saline': 2364, 'every': 934, 'past': 1930, 'family': 982, 'social': 2490, 'versus': 2891, 'attempts': 216, 'tx': 2806, 'followed': 1061, 'team': 2661, 'telephone': 2670, 'fax': 993, 'questionable': 2168, 'negative': 1745, 'vegetation': 2872, 'time': 2716, 'presence': 2076, 'recommended': 2211, 'completed': 523, 'dependent': 693, 'coronary': 591, 'status': 2540, 'post': 2047, 'myocardial': 1720, 'infarction': 1326, 'echocardiogram': 843, 'performed': 1962, 'showing': 2441, 'ejection': 859, 'focal': 1054, 'thickening': 2694, 'mitral': 1660, 'aortic': 137, 'mild': 1652, 'pulmonary': 2146, 'benign': 271, 'hypertrophy': 1254, 'creatinine': 617, 'dvt': 829, 'hyperlipidemia': 1251, 'fall': 980, 'occipital': 1829, 'ulcers': 2816, 'femoral': 1007, 'neck': 1739, 'radial': 2176, 'fx': 1091, 'occupation': 1832, 'drugs': 816, 'tobacco': 2730, 'alcohol': 78, 'prior': 2095, 'hospitalization': 1226, 'surgery': 2611, 'support': 2607, 'psychiatric': 2137, 'rehab': 2240, 'occasionally': 1828, 'sister': 2465, 'health': 1178, 'care': 383, 'proxy': 2133, 'lives': 1513, 'involved': 1387, 'smoking': 2488, 'day': 653, 'years': 2989, 'rare': 2186, 'use': 2848, 'drug': 815, 'review': 2314, 'systems': 2637, 'flowsheet': 1048, 'data': 648, 'vital': 2908, 'signs': 2454, 'hemodynamic': 1195, 'monitoring': 1678, 'balance': 247, 'since': 2460, 'tmax': 2729, 'tcurrent': 2660, 'hr': 1232, 'bpm': 320, 'bp': 319, 'mmhg': 1664, 'rr': 2341, 'insp': 1357, 'spo': 2515, 'heart': 1180, 'total': 2748, 'tf': 2686, 'ivf': 1402, 'stool': 2561, 'drains': 803, 'respiratory': 2287, 'delivery': 681, 'device': 713, 'nasal': 1728, 'cannula': 369, 'abg': 5, 'numeric': 1809, 'identifier': 1282, 'physical': 1987, 'general': 1111, 'slow': 2480, 'answer': 122, 'awake': 232, 'oriented': 1864, 'acute': 31, 'distress': 772, 'heent': 1181, 'sclera': 2383, 'anicteric': 116, 'dry': 817, 'oropharynx': 1866, 'supple': 2606, 'rij': 2324, 'auscultation': 222, 'bilaterally': 284, 'wheezes': 2953, 'rales': 2182, 'regular': 2238, 'rate': 2188, 'murmurs': 1709, 'rubs': 2346, 'gallops': 1097, 'non': 1777, 'tender': 2676, 'ext': 955, 'able': 8, 'move': 1689, 'extremities': 965, 'labs': 1434, 'ul': 2814, 'g': 1092, 'dl': 779, 'meq': 1630, 'image': 1290, 'jpg': 1410, 'wbc': 2936, 'hct': 1172, 'cr': 611, 'tc': 2658, 'glucose': 1129, 'ptt': 2140, 'inr': 1354, 'alt': 91, 'ast': 197, 'alk': 83, 'phos': 1986, 'bili': 286, 'differential': 732, 'neuts': 1754, 'band': 249, 'lymph': 1552, 'mono': 1679, 'eos': 897, 'lactic': 1439, 'mmol': 1666, 'ca': 353, 'analysis': 107, 'osh': 1870, 'range': 2183, 'peak': 1945, 'bun': 349, 'lfts': 1488, 'wnl': 2973, 'imaging': 1293, 'cxr': 639, 'pending': 1954, 'microbiology': 1644, 'cx': 638, 'peripheral': 1970, 'stick': 2552, 'ecg': 841, 'nl': 1770, 'axis': 236, 'lvh': 1549, 'voltage': 2914, 'limb': 1496, 'leads': 1462, 'diffuse': 736, 'small': 2485, 'waves': 2934, 'iii': 1284, 'avf': 226, 'assessment': 193, 'plan': 2002, 'ar': 161, 'likely': 1495, 'continuing': 568, 'relatively': 2243, 'empiric': 877, 'spectrum': 2505, 'stay': 2541, 'count': 601, 'th': 2687, 'leukocytosis': 1478, 'sepsis': 2413, 'possibly': 2046, 'diff': 730, 'improve': 1298, 'hold': 1222, 'check': 426, 'mixed': 1661, 'venous': 2878, 'sat': 2366, 'pan': 1909, 'sputum': 2520, 'eval': 924, 'pna': 2020, 'source': 2498, 'continue': 565, 'trend': 2780, 'output': 1875, 'failure': 978, 'admission': 48, 'atn': 206, 'albumin': 76, 'clearly': 459, 'unclear': 2824, 'would': 2980, 'consult': 557, 'possible': 2045, 'diet': 729, 'hypoxia': 1270, 'underlying': 2825, 'copd': 584, 'component': 529, 'overload': 1880, 'edema': 848, 'nebs': 1737, 'vs': 2919, 'per': 1957, 'un': 2819, 'send': 2408, 'ua': 2810, 'superficial': 2602, 'vein': 2874, 'thrombosis': 2707, 'high': 1212, 'risk': 2326, 'recurrent': 2221, 'anticoagulation': 131, 'amio': 96, 'anemia': 109, 'upper': 2841, 'additional': 37, 'prbc': 2059, 'deficiency': 669, 'appears': 150, 'folate': 1058, 'guiac': 1160, 'stools': 2562, 'transfuse': 2766, 'sacral': 2360, 'ulcer': 2815, 'wound': 2981, 'dm': 780, 'controlled': 576, 'insulin': 1361, 'add': 33, 'needed': 1741, 'regurgitation': 2239, 'echo': 842, 'thus': 2710, 'although': 93, 'flow': 1047, 'gerd': 1115, 'pantoprazole': 1913, 'simvastatin': 2459, 'foley': 1059, 'fen': 1009, 'replete': 2262, 'electrolytes': 863, 'prophylaxis': 2119, 'access': 19, 'lines': 1502, 'ij': 1285, 'placed': 2000, 'request': 2275, 'picc': 1991, 'code': 483, 'dni': 781, 'changed': 421, 'full': 1086, 'attending': 217, 'medicine': 1621, 'spoke': 2516, 'ms': 1698, 'cell': 411, 'want': 2926, 'pressor': 2085, 'therapy': 2689, 'necessary': 1738, 'intubated': 1384, 'mechanical': 1611, 'ventilator': 2883, 'communication': 514, 'hcp': 1171, 'disposition': 765, 'nutrition': 1813, 'glycemic': 1130, 'control': 575, 'sugar': 2592, 'arterial': 176, 'multi': 1703, 'lumen': 1544, 'systemic': 2636, 'stress': 2567, 'ppi': 2056, 'vap': 2865, 'comments': 510, 'contrast': 573, 'pelvis': 1953, 'mass': 1588, 'field': 1022, 'view': 2898, 'woman': 2974, 'altered': 92, 'mental': 1629, 'hypothermia': 1265, 'etiology': 920, 'neg': 1744, 'contraindications': 572, 'wet': 2950, 'read': 2198, 'tue': 2797, 'stranding': 2565, 'surrounding': 2613, 'pancreas': 1910, 'appearance': 147, 'compatible': 518, 'pancreatitis': 1912, 'fatty': 992, 'indication': 1320, 'female': 1006, 'evaluate': 925, 'comparison': 516, 'none': 1779, 'technique': 2664, 'mdct': 1606, 'acquired': 26, 'axial': 234, 'images': 1292, 'pubic': 2142, 'symphysis': 2631, 'multiplanar': 1706, 'reformatted': 2230, 'without': 2970, 'intravenous': 1382, 'shows': 2442, 'attenuation': 219, 'consistent': 551, 'hepatic': 1204, 'lesion': 1473, 'identified': 1281, 'exam': 941, 'limited': 1497, 'gallbladder': 1096, 'spleen': 2512, 'adrenal': 53, 'glands': 1125, 'kidneys': 1423, 'extensive': 959, 'inflammatory': 1337, 'extending': 956, 'transverse': 2774, 'root': 2333, 'poorly': 2032, 'bowel': 318, 'loops': 1529, 'caliber': 361, 'atherosclerotic': 204, 'calcification': 356, 'moderate': 1670, 'lymphadenopathy': 1553, 'free': 1076, 'air': 70, 'terminates': 2680, 'rectum': 2220, 'sigmoid': 2448, 'colon': 497, 'collapsed': 493, 'contains': 563, 'catheter': 392, 'proximal': 2132, 'iliac': 1287, 'amount': 98, 'pelvic': 1952, 'bone': 312, 'windows': 2961, 'lesions': 1474, 'suspicious': 2617, 'osseous': 1871, 'metastases': 1635, 'correlate': 593, 'lipase': 1504, 'amylase': 106, 'limits': 1499, 'evaluation': 927, 'pancreatic': 1911, 'vascular': 2867, 'complications': 528, 'scan': 2378, 'yr': 2995, 'abdominal': 4, 'cholecystitis': 439, 'age': 64, 'sign': 2449, 'interpretation': 1371, 'serial': 2417, 'show': 2439, 'parenchyma': 1920, 'visualized': 2906, 'minutes': 1659, 'administration': 47, 'morphine': 1683, 'activity': 30, 'within': 2969, 'concerning': 534, 'making': 1571, 'finding': 1030, 'specific': 2503, 'preliminary': 2069, 'results': 2302, 'call': 362, 'decubitus': 665, 'bilateral': 283, 'see': 2397, 'specifics': 2504, 'action': 28, 'bed': 266, 'turned': 2800, 'frequently': 1080, 'rn': 2331, 'boots': 315, 'response': 2292, 'breakdown': 329, 'skin': 2472, 'recommendations': 2210, 'organ': 1862, 'dysfunction': 831, 'lactate': 1438, 'systolic': 2638, 'even': 929, 'cc': 402, 'ns': 1801, 'order': 1859, 'urology': 2845, 'stable': 2525, 'never': 1755, 'tachycardic': 2646, 'shift': 2433, 'monitor': 1676, 'vitals': 2909, 'need': 1740, 'ir': 1393, 'dc': 655, 'mellitus': 1626, 'type': 2808, 'ii': 1283, 'chart': 425, 'medicated': 1618, 'diabetic': 716, 'protected': 2124, 'section': 2394, 'muscle': 1710, 'large': 1444, 'doses': 794, 'valium': 2856, 'fentanyl': 1011, 'patch': 1931, 'intact': 1362, 'held': 1183, 'due': 824, 'still': 2553, 'assess': 191, 'attempt': 213, 'dosing': 795, 'avoid': 228, 'addendum': 35, 'entered': 893, 'urosepsis': 2846, 'anxiety': 134, 'according': 21, 'began': 268, 'feel': 998, 'ill': 1288, 'dysuria': 833, 'fatigue': 991, 'morning': 1682, 'later': 1452, 'evening': 930, 'flank': 1043, 'presented': 2079, 'fever': 1013, 'nausea': 1731, 'emesis': 874, 'received': 2203, 'ceftriaxone': 409, 'based': 253, 'micu': 1645, 'management': 1577, 'upon': 2840, 'nbp': 1732, 'map': 1580, 'address': 39, 'pedal': 1947, 'pulses': 2149, 'palpable': 1906, 'warm': 2929, 'good': 1137, 'orally': 1857, 'chills': 435, 'diaphoretic': 722, 'commands': 509, 'sp': 2499, 'ra': 2175, 'cefepime': 408, 'gm': 1131, 'aline': 82, 'poor': 2031, 'effect': 853, 'nurse': 1811, 'went': 2949, 'back': 241, 'sleeping': 2476, 'nc': 1733, 'appearing': 149, 'hemodynamically': 1196, 'remains': 2250, 'current': 630, 'abx': 17, 'uo': 2836, 'yo': 2994, 'asthma': 198, 'trach': 2756, 'inpatient': 1353, 'unit': 2827, 'airway': 72, 'coughing': 598, 'difficulty': 735, 'breathing': 332, 'felt': 1004, 'throat': 2705, 'swelling': 2626, 'speaking': 2502, 'inability': 1302, 'minute': 1658, 'epi': 899, 'repeat': 2258, 'showed': 2440, 'event': 931, 'complaining': 519, 'floor': 1046, 'evaluated': 926, 'overdose': 1879, 'getting': 1118, 'complaints': 521, 'intake': 1363, 'refused': 2231, 'fluids': 1051, 'lack': 1437, 'cord': 586, 'events': 932, 'rec': 2201, 'mask': 1587, 'bipap': 292, 'safety': 2361, 'checks': 428, 'anxious': 135, 'restless': 2298, 'wheeze': 2952, 'speak': 2501, 'staff': 2526, 'best': 272, 'start': 2531, 'draw': 805, 'sleep': 2475, 'repeated': 2259, 'night': 1766, 'voice': 2911, 'cooperative': 583, 'room': 2332, 'quiet': 2171, 'space': 2500, 'emotional': 875, 'npo': 1798, 'sliding': 2477, 'scale': 2376, 'orders': 1861, 'humalog': 1238, 'ice': 1275, 'obstructive': 1822, 'apnea': 143, 'osa': 1869, 'productive': 2105, 'strong': 2569, 'deep': 666, 'asleep': 187, 'remain': 2246, 'pulm': 2145, 'long': 1526, 'standing': 2530, 'provide': 2129, 'give': 1122, 'set': 2422, 'reviewed': 2315, 'interventions': 1375, 'assist': 194, 'calm': 364, 'restart': 2295, 'psych': 2136, 'artifact': 180, 'irregular': 1395, 'suggests': 2598, 'repolarization': 2265, 'abnormalities': 10, 'ventricular': 2887, 'longer': 1527, 'paced': 1893, 'uncertain': 2822, 'skull': 2473, 'ew': 938, 'nad': 1723, 'sw': 2622, 'notified': 1793, 'orbital': 1858, 'ha': 1163, 'ho': 1220, 'reports': 2269, 'improved': 1299, 'con': 531, 'subdural': 2579, 'hemorrhage': 1199, 'equal': 906, 'strength': 2566, 'follows': 1063, 'neuro': 1749, 'sz': 2639, 'doctor': 784, 'unchanged': 2823, 'neurology': 1752, 'mca': 1599, 'tpa': 2752, 'candidate': 368, 'pupil': 2151, 'approx': 159, 'stat': 2535, 'head': 1176, 'massive': 1590, 'hemorrhagic': 1200, 'territory': 2683, 'infarct': 1325, 'rightward': 2323, 'subfalcine': 2580, 'herniation': 1207, 'uncal': 2821, 'early': 837, 'near': 1735, 'complete': 522, 'effacement': 852, 'lateral': 1453, 'ventricle': 2885, 'third': 2699, 'atrium': 209, 'dilated': 743, 'stroke': 2568, 'cerebral': 416, 'unresponsive': 2833, 'surgical': 2612, 'pupils': 2152, 'reactive': 2197, 'corneals': 589, 'spontaneous': 2518, 'movement': 1690, 'abnormal': 9, 'impaired': 1296, 'gag': 1094, 'regarding': 2233, 'prognosis': 2107, 'dnr': 782, 'daughter': 651, 'extent': 960, 'second': 2391, 'treat': 2777, 'overnight': 1882, 'neurological': 1751, 'mannitol': 1578, 'infiltrate': 1334, 'comparisons': 517, 'available': 225, 'size': 2470, 'mediastinal': 1615, 'hilar': 1214, 'contours': 571, 'appear': 146, 'pleural': 2011, 'effusion': 855, 'retrocardiac': 2307, 'probably': 2098, 'associated': 196, 'projecting': 2112, 'pneumonia': 2024, 'considered': 549, 'calcified': 358, 'quadrant': 2165, 'two': 2805, 'gallstones': 1098, 'airspace': 71, 'cholelithiasis': 440, 'babygram': 240, 'infant': 1324, 'prematurity': 2071, 'rds': 2193, 'ray': 2189, 'twin': 2804, 'born': 317, 'placement': 2001, 'studies': 2573, 'earlier': 836, 'endotracheal': 887, 'repositioned': 2270, 'lying': 1551, 'three': 2704, 'way': 2935, 'thoracic': 2701, 'inlet': 1352, 'towards': 2750, 'better': 274, 'apparent': 144, 'resolution': 2284, 'hazy': 1168, 'opacities': 1849, 'changes': 422, 'difficult': 734, 'study': 2574, 'position': 2040, 'region': 2235, 'origin': 1865, 'repositioning': 2271, 'slightly': 2479, 'suggestive': 2597, 'tsicu': 2793, 'nursing': 1812, 'home': 1224, 'approximately': 160, 'five': 1039, 'loss': 1533, 'gross': 1150, 'primary': 2094, 'shoulder': 2438, 'pmhx': 2017, 'htn': 1236, 'hydralazine': 1241, 'lisinopril': 1507, 'sulfate': 2600, 'acetaminophen': 23, 'vac': 2855, 'chloride': 436, 'flush': 1052, 'haldol': 1164, 'feeding': 996, 'cardiovascular': 381, 'expansion': 951, 'symmetric': 2630, 'sounds': 2497, 'cta': 624, 'soft': 2492, 'neurologic': 1750, 'simple': 2457, 'moves': 1692, 'intracerebral': 1377, 'ich': 1276, 'probable': 2097, 'loc': 1521, 'rib': 2320, 'recs': 2218, 'emergent': 873, 'pack': 1897, 'platelets': 2007, 'fractures': 1075, 'adequate': 41, 'hematology': 1188, 'follow': 1060, 'endocrine': 885, 'riss': 2328, 'bg': 275, 'infectious': 1329, 'trending': 2781, 'tubes': 2796, 'wounds': 2982, 'consults': 559, 'billing': 290, 'gauge': 1105, 'interdisciplinary': 1366, 'rounds': 2337, 'spent': 2508, 'date': 649, 'discharge': 752, 'birth': 293, 'sex': 2429, 'levofloxacin': 1483, 'penicillins': 1955, 'lf': 1486, 'invasive': 1386, 'procedure': 2102, 'illness': 1289, 'mr': 1694, 'titles': 2725, 'pvd': 2157, 'esrd': 913, 'bps': 321, 'reported': 2267, 'intermittent': 1368, 'sent': 2412, 'bands': 250, 'azithromycin': 237, 'dopamine': 789, 'drip': 810, 'location': 1524, 'nrb': 1800, 'confused': 542, 'somnolent': 2495, 'sternal': 2549, 'rub': 2345, 'palpation': 1907, 'firm': 1035, 'rebound': 2200, 'peritoneal': 1971, 'diagnosed': 717, 'hiatal': 1211, 'hernia': 1206, 'transplant': 2771, 'digits': 739, 'finger': 1033, 'knee': 1424, 'popliteal': 2033, 'posterior': 2048, 'tibial': 2713, 'bypass': 351, 'graft': 1142, 'inguinal': 1344, 'extremity': 966, 'angiogram': 113, 'distal': 767, 'incision': 1306, 'father': 990, 'denied': 689, 'etoh': 921, 'quit': 2172, 'contributory': 574, 'pertinent': 1980, 'elevations': 866, 'seen': 2399, 'dated': 650, 'volumes': 2916, 'quite': 2173, 'patchy': 1932, 'allowing': 86, 'vessels': 2894, 'ascites': 183, 'ischemia': 1396, 'excluded': 947, 'moderately': 1671, 'bibasilar': 276, 'superimposed': 2603, 'rbc': 2190, 'hgb': 1210, 'mcv': 1604, 'mch': 1602, 'mchc': 1603, 'rdw': 2194, 'creat': 616, 'na': 1722, 'cl': 454, 'hco': 1170, 'ldh': 1459, 'cpk': 608, 'mb': 1598, 'calcium': 359, 'fio': 1034, 'pco': 1939, 'ph': 1982, 'art': 175, 'green': 1148, 'top': 2745, 'brief': 334, 'markedly': 1584, 'responded': 2289, 'please': 2010, 'hard': 1167, 'record': 2215, 'discussion': 758, 'decision': 659, 'dialysis': 720, 'comfort': 504, 'measures': 1609, 'palliative': 1904, 'consulted': 558, 'passed': 1928, 'bedside': 267, 'tablet': 2642, 'except': 945, 'qhs': 2160, 'hydromorphone': 1244, 'lantus': 1442, 'sq': 2521, 'metoprolol': 1638, 'metronidazole': 1639, 'complex': 525, 'vitamin': 2910, 'mvi': 1716, 'expired': 953, 'instructions': 1359, 'followup': 1064, 'resident': 2282, 'came': 365, 'shortly': 2436, 'hypoxic': 1271, 'intubation': 1385, 'ogt': 1835, 'cultured': 628, 'process': 2104, 'amp': 100, 'bicarb': 277, 'ls': 1539, 'infusing': 1341, 'remained': 2248, 'sedation': 2396, 'gu': 1157, 'indwelling': 1323, 'increase': 1312, 'dispo': 764, 'duration': 828, 'initially': 1346, 'percocet': 1958, 'facility': 975, 'concerned': 533, 'recently': 2206, 'notes': 1792, 'groin': 1149, 'cvl': 635, 'lue': 1541, 'revealed': 2312, 'ortho': 1867, 'agitated': 66, 'reportedly': 2268, 'desat': 697, 'switched': 2627, 'comfortable': 505, 'delirium': 680, 'little': 1511, 'frequent': 1079, 'help': 1184, 'weaned': 2940, 'test': 2684, 'information': 1339, 'hg': 1209, 'tte': 2794, 'doppler': 790, 'pulse': 2148, 'color': 500, 'technical': 2663, 'quality': 2166, 'interatrial': 1365, 'septum': 2416, 'cavity': 399, 'overall': 1877, 'function': 1088, 'severely': 2427, 'depressed': 694, 'global': 1127, 'hypokinesis': 1261, 'aorta': 136, 'diameter': 721, 'ascending': 182, 'valve': 2860, 'leaflets': 1464, 'thickened': 2693, 'annular': 119, 'tricuspid': 2783, 'pulmonic': 2147, 'structurally': 2571, 'physiologic': 1990, 'pericardium': 1966, 'pericardial': 1965, 'conclusions': 536, 'cabg': 354, 'pacing': 1896, 'chf': 432, 'ccu': 403, 'icd': 1274, 'worse': 2977, 'dyspnea': 832, 'vomiting': 2918, 'numerous': 1810, 'times': 2717, 'vt': 2921, 'sustained': 2618, 'bolused': 310, 'twice': 2803, 'episodes': 904, 'ablation': 7, 'turning': 2801, 'rule': 2349, 'trop': 2788, 'embolism': 869, 'bleeding': 299, 'myalgias': 1719, 'joint': 1407, 'hemoptysis': 1198, 'black': 295, 'red': 2222, 'fevers': 1014, 'calf': 360, 'cardiac': 374, 'notable': 1789, 'absence': 14, 'exertion': 949, 'orthopnea': 1868, 'ankle': 118, 'palpitations': 1908, 'tartrate': 2656, 'lidocaine': 1490, 'inferior': 1330, 'anteroseptal': 126, 'lad': 1441, 'svg': 2620, 'om': 1838, 'pda': 1942, 'cysts': 644, 'cholecystectomy': 438, 'ppd': 2055, 'arrhythmia': 172, 'sudden': 2591, 'death': 657, 'otherwise': 1873, 'ago': 68, 'constitutional': 556, 'resp': 2286, 'wheezing': 2954, 'eyes': 971, 'genitourinary': 1113, 'vision': 2901, 'hematuria': 1190, 'double': 796, 'constipation': 555, 'melena': 1625, 'stones': 2560, 'dark': 647, 'cloudy': 470, 'decreased': 663, 'bradycardia': 323, 'thyroid': 2711, 'teeth': 2667, 'sensation': 2410, 'rash': 2187, 'mouth': 1688, 'headache': 1177, 'seizures': 2404, 'bruising': 345, 'wgt': 2951, 'appropriate': 157, 'eomi': 896, 'conjunctiva': 546, 'pink': 1993, 'cyanosis': 640, 'jvp': 1415, 'pmi': 2018, 'located': 1523, 'scoliosis': 2385, 'ctab': 625, 'crackles': 612, 'rhonchi': 2317, 'hsm': 1235, 'tenderness': 2677, 'enlarged': 891, 'bruits': 346, 'e': 834, 'stasis': 2534, 'carotid': 389, 'dp': 797, 'telemetry': 2669, 'masses': 1589, 'thrombus': 2708, 'severity': 2428, 'valvular': 2861, 'stenosis': 2544, 'least': 1466, 'trivial': 2787, 'similar': 2456, 'prominent': 2117, 'ett': 922, 'cath': 391, 'hemodynamics': 1197, 'discharged': 753, 'seems': 2398, 'keep': 1418, 'discuss': 756, 'pump': 2150, 'statin': 2539, 'lasix': 1447, 'bb': 257, 'enzymes': 895, 'suggest': 2594, 'injury': 1351, 'colace': 488, 'senna': 2409, 'contact': 561, 'next': 1759, 'site': 2466, 'clean': 456, 'hematoma': 1189, 'appreciated': 155, 'emboli': 868, 'md': 1605, 'neonatology': 1747, 'progress': 2108, 'life': 1491, 'weeks': 2945, 'baby': 239, 'continues': 567, 'cvs': 637, 'wt': 2984, 'tolerated': 2737, 'lytes': 1556, 'us': 2847, 'meeting': 1623, 'planned': 2003, 'afternoon': 61, 'get': 1117, 'objective': 1818, 'refer': 2224, 'sheet': 2432, 'freq': 1078, 'progressed': 2109, 'beats': 261, 'runs': 2353, 'kcl': 1417, 'conts': 577, 'cp': 606, 'asked': 185, 'neb': 1736, 'lobes': 1520, 'person': 1979, 'yes': 2991, 'questions': 2169, 'become': 263, 'max': 1595, 'becoming': 265, 'responsive': 2293, 'consolidation': 553, 'radiographs': 2179, 'regions': 2237, 'opacification': 1847, 'could': 599, 'standard': 2529, 'wave': 2933, 'definite': 672, 'coumadin': 600, 'transfered': 2764, 'dense': 691, 'ems': 878, 'sitting': 2468, 'weak': 2937, 'verbal': 2888, 'bradycardic': 324, 'route': 2338, 'atropine': 211, 'persistent': 1977, 'protection': 2125, 'coags': 478, 'gluconate': 1128, 'digoxin': 740, 'phenylephrine': 1984, 'propofol': 2120, 'ventilation': 2882, 'af': 58, 'height': 1182, 'inch': 1304, 'mode': 1669, 'cpap': 607, 'psv': 2135, 'cmh': 473, 'rsbi': 2343, 'plateau': 2006, 'compliance': 526, 'pao': 1914, 'distant': 768, 'dorsalis': 792, 'pedis': 1948, 'responds': 2291, 'stimuli': 2556, 'command': 508, 'troponin': 2789, 'tco': 2659, 'ischemic': 1397, 'cardiology': 376, 'wean': 2939, 'neo': 1746, 'goal': 1134, 'ps': 2134, 'fs': 1084, 'cultures': 629, 'blocker': 301, 'hob': 1221, 'elevation': 865, 'wake': 2923, 'critically': 621, 'neurosurgery': 1753, 'outside': 1876, 'apparently': 145, 'chair': 418, 'hypertensive': 1253, 'receive': 2202, 'collar': 494, 'corneal': 588, 'reflexes': 2227, 'painful': 1901, 'stimulation': 2555, 'toes': 2732, 'emergency': 872, 'intraventricular': 1383, 'dilatation': 742, 'midline': 1649, 'sulci': 2599, 'criteria': 619, 'brain': 325, 'consent': 547, 'intracranial': 1378, 'different': 731, 'seizure': 2403, 'single': 2461, 'supine': 2605, 'nasogastric': 1729, 'gastric': 1103, 'body': 308, 'distention': 770, 'clinical': 461, 'correlation': 594, 'cardiomegaly': 378, 'enlargement': 892, 'prominence': 2116, 'vascularity': 2868, 'interstitial': 1372, 'cardiogenic': 375, 'balloon': 248, 'weight': 2946, 'lb': 1457, 'bsa': 348, 'suboptimal': 2582, 'wire': 2962, 'chamber': 419, 'leaflet': 1463, 'excursion': 948, 'determined': 707, 'anterior': 123, 'represents': 2274, 'fat': 989, 'pad': 1898, 'though': 2702, 'loculated': 1525, 'indicate': 1317, 'decisions': 660, 'echocardiographic': 844, 'basal': 251, 'inferolateral': 1332, 'apex': 139, 'remaining': 2249, 'akinetic': 75, 'lv': 1547, 'iabp': 1272, 'vent': 2879, 'arrest': 171, 'lab': 1429, 'versed': 2889, 'aeration': 57, 'suctioned': 2589, 'thick': 2692, 'secretions': 2393, 'cardiomyopathy': 379, 'carevue': 386, 'settings': 2424, 'abgs': 6, 'removal': 2252, 'removed': 2254, 'incident': 1305, 'minimal': 1655, 'bifurcation': 280, 'le': 1460, 'ue': 2812, 'fri': 1081, 'aneurysm': 111, 'dissection': 766, 'lytic': 1557, 'tissue': 2722, 'metastatic': 1637, 'focus': 1056, 'foci': 1055, 'degenerative': 674, 'retroperitoneal': 2308, 'cystic': 643, 'duct': 822, 'trace': 2755, 'ground': 1152, 'glass': 1126, 'version': 2890, 'spine': 2511, 'additionally': 38, 'adjacent': 42, 'node': 1772, 'measuring': 1610, 'contour': 570, 'calcifications': 357, 'throughout': 2709, 'common': 512, 'arteries': 177, 'demonstrate': 685, 'celiac': 410, 'patent': 1933, 'dilation': 744, 'hypodensities': 1258, 'demonstrates': 687, 'obstruction': 1821, 'muscles': 1711, 'nodes': 1773, 'short': 2435, 'structures': 2572, 'phase': 1983, 'hypodense': 1257, 'portions': 2038, 'smaller': 2486, 'sclerotic': 2384, 'consider': 548, 'effusions': 856, 'indications': 1321, 'semi': 2407, 'film': 1026, 'effort': 854, 'hemithorax': 1194, 'opacified': 1848, 'pacer': 1895, 'previously': 2093, 'atypical': 220, 'fully': 1087, 'maternal': 1593, 'pregnancy': 2067, 'prenatal': 2072, 'rpr': 2340, 'gestation': 1116, 'gbs': 1107, 'ultrasound': 2817, 'presentation': 2078, 'suction': 2588, 'stim': 2554, 'provided': 2130, 'oxygen': 1888, 'nicu': 1765, 'responding': 2290, 'administered': 46, 'subsequently': 2585, 'pe': 1943, 'palate': 1902, 'deferred': 668, 'ear': 835, 'retractions': 2306, 'fair': 979, 'scattered': 2381, 'suctioning': 2590, 'perfused': 1963, 'rrr': 2342, 'murmur': 1708, 'organomegaly': 1863, 'active': 29, 'anus': 133, 'normally': 1786, 'cns': 476, 'tone': 2741, 'moving': 1693, 'movements': 1691, 'hips': 1216, 'pattern': 1937, 'requirement': 2279, 'symptoms': 2632, 'clinically': 462, 'surfactant': 2610, 'required': 2278, 'sao': 2365, 'gas': 1102, 'mean': 1608, 'cbc': 400, 'drawn': 806, 'diagnostic': 719, 'iph': 1392, 'progression': 2110, 'motor': 1687, 'vehicle': 2873, 'accident': 20, 'femur': 1008, 'intraparenchymal': 1380, 'routine': 2339, 'temporal': 2673, 'parenchymal': 1921, 'larger': 1445, 'tiny': 2719, 'parietal': 1923, 'essentially': 914, 'cistern': 448, 'preserved': 2083, 'vented': 2880, 'checked': 427, 'protocol': 2127, 'scant': 2379, 'amounts': 99, 'white': 2956, 'alveolar': 94, 'intra': 1376, 'diaphragm': 723, 'internal': 1370, 'jugular': 1411, 'median': 1614, 'sternotomy': 2550, 'wires': 2963, 'cardiomediastinal': 377, 'extension': 958, 'minor': 1657, 'fissure': 1037, 'emphysema': 876, 'limiting': 1498, 'coiled': 486, 'vasculature': 2869, 'fields': 1023, 'clips': 464, 'spinal': 2510, 'fusion': 1090, 'described': 700, 'initiated': 1348, 'appropriately': 158, 'careview': 385, 'tan': 2654, 'obese': 1816, 'bile': 285, 'clamped': 455, 'legs': 1471, 'visit': 2902, 'titrate': 2726, 'indicated': 1318, 'feeds': 997, 'update': 2838, 'poc': 2027, 'cardiopulmonary': 380, 'upright': 2842, 'significantly': 2453, 'prosthesis': 2122, 'scarring': 2380, 'breast': 330, 'cancer': 367, 'presents': 2082, 'albuterol': 77, 'audible': 221, 'bag': 245, 'respond': 2288, 'dropped': 812, 'boluses': 311, 'bc': 258, 'yet': 2993, 'many': 1579, 'bilious': 288, 'co': 477, 'feet': 1001, 'hands': 1166, 'cold': 489, 'titrated': 2727, 'liters': 1510, 'serum': 2419, 'dopplerable': 791, 'bair': 246, 'maintained': 1565, 'vasopressin': 2870, 'bacterial': 243, 'sx': 2628, 'arf': 166, 'maintenance': 1567, 'electrolyte': 862, 'adjusted': 44, 'magnesium': 1561, 'repletion': 2264, 'examined': 943, 'agree': 69, 'portal': 2036, 'egd': 857, 'pulled': 2144, 'bronch': 338, 'airways': 73, 'advance': 54, 'sig': 2447, 'try': 2791, 'needs': 1743, 'varices': 2866, 'look': 1528, 'critical': 620, 'ventricles': 2886, 'matter': 1594, 'differentiation': 733, 'density': 692, 'subarachnoid': 2576, 'optiray': 1855, 'cpt': 610, 'codes': 484, 'sel': 2405, 'rd': 2192, 'distinct': 771, 'procedural': 2101, 'nd': 1734, 'onset': 1843, 'grade': 1140, 'requested': 2276, 'suggested': 2595, 'risks': 2327, 'explained': 954, 'detail': 703, 'gave': 1106, 'brought': 343, 'clot': 468, 'basilar': 256, 'cisterns': 449, 'drain': 799, 'anesthesia': 110, 'using': 2850, 'french': 1077, 'sheath': 2431, 'advanced': 55, 'cervical': 417, 'cavernous': 398, 'middle': 1648, 'vertebral': 2892, 'ica': 1273, 'superior': 2604, 'cerebellar': 415, 'induced': 1322, 'junction': 1412, 'circulation': 446, 'completely': 524, 'filled': 1024, 'across': 27, 'communicating': 513, 'decided': 658, 'included': 1308, 'angle': 115, 'arteriogram': 178, 'oblique': 1819, 'already': 89, 'appeared': 148, 'occluded': 1830, 'point': 2029, 'sac': 2359, 'entire': 894, 'widely': 2958, 'successful': 2587, 'motion': 1686, 'extra': 962, 'collection': 495, 'along': 88, 'layering': 1456, 'hydrocephalus': 1243, 'subcutaneous': 2578, 'port': 2034, 'pathology': 1934, 'fib': 1018, 'cri': 618, 'ruq': 2355, 'exams': 944, 'abnormality': 11, 'biliary': 287, 'portion': 2037, 'mostly': 1684, 'overlying': 1881, 'hydronephrosis': 1245, 'either': 858, 'med': 1612, 'returned': 2310, 'stopped': 2564, 'therefore': 2690, 'stent': 2545, 'case': 390, 'nstemi': 1804, 'ntg': 1806, 'going': 1136, 'dx': 830, 'used': 2849, 'stemi': 2543, 'expected': 952, 'ectopy': 846, 'tolerating': 2739, 'ace': 22, 'beta': 273, 'plavix': 2008, 'degrees': 676, 'oob': 1844, 'receiving': 2204, 'ranging': 2184, 'voiding': 2912, 'procedures': 2103, 'anti': 127, 'stents': 2547, 'asking': 186, 'feeling': 999, 'arousable': 170, 'pacemaker': 1894, 'cause': 394, 'ok': 1836, 'cards': 382, 'initials': 1347, 'awaiting': 231, 'terminating': 2681, 'vena': 2877, 'cava': 397, 'development': 711, 'films': 1027, 'somewhat': 2494, 'costophrenic': 596, 'question': 2167, 'joints': 1408, 'marked': 1583, 'segment': 2400, 'npn': 1797, 'mother': 1685, 'rv': 2356, 'focused': 1057, 'views': 2899, 'lvef': 1548, 'resting': 2297, 'got': 1138, 'sl': 2474, 'tidal': 2715, 'unable': 2820, 'labetolol': 1431, 'tid': 2714, 'cmv': 475, 'autoflow': 223, 'ears': 838, 'nose': 1788, 'normocephalic': 1787, 'og': 1834, 'assessed': 192, 'anuric': 132, 'labetalol': 1430, 'famotidine': 983, 'improvement': 1300, 'uf': 2813, 'begin': 269, 'parents': 1922, 'icp': 1277, 'dressing': 807, 'osteomyelitis': 1872, 'tortuous': 2747, 'markings': 1585, 'lat': 1450, 'four': 1072, 'comminuted': 511, 'displaced': 762, 'work': 2975, 'brother': 342, 'coming': 507, 'epidural': 900, 'area': 164, 'partial': 1925, 'involving': 1389, 'higher': 1213, 'suspected': 2615, 'areas': 165, 'vss': 2920, 'tonight': 2743, 'confusion': 543, 'presenting': 2080, 'extends': 957, 'fourth': 1073, 'aspect': 188, 'related': 2241, 'paranasal': 1919, 'sinuses': 2463, 'mastoid': 1591, 'cells': 412, 'indicating': 1319, 'obtain': 1823, 'worsening': 2979, 'worsened': 2978, 'rectal': 2219, 'cap': 370, 'lopressor': 1531, 'decrease': 662, 'tachypneic': 2648, 'declined': 661, 'cpr': 609, 'goals': 1135, 'colonoscopy': 499, 'iron': 1394, 'hypothyroidism': 1267, 'abuse': 16, 'nh': 1762, 'daughters': 652, 'gen': 1110, 'injection': 1349, 'op': 1846, 'mmm': 1665, 'veins': 2875, 'nt': 1805, 'guaiac': 1158, 'noxious': 1795, 'potassium': 2052, 'anion': 117, 'gap': 1101, 'protein': 2126, 'bilirubin': 289, 'unlikely': 2831, 'stated': 2537, 'put': 2154, 'atorvastatin': 207, 'aspirin': 190, 'lorazepam': 1532, 'pr': 2058, 'la': 1428, 'thickness': 2695, 'regional': 2236, 'hyperdynamic': 1248, 'estimated': 915, 'lvot': 1550, 'gradient': 1141, 'arch': 162, 'levels': 1481, 'descending': 699, 'velocity': 2876, 'mvp': 1717, 'tr': 2754, 'pa': 1891, 'thicknesses': 2696, 'prolapse': 2114, 'biventricular': 294, 'thiamine': 2691, 'shunt': 2443, 'etc': 917, 'preoperative': 2074, 'elongated': 867, 'perl': 1973, 'ac': 18, 'dim': 748, 'tpn': 2753, 'end': 882, 'like': 1494, 'withdrawal': 2966, 'ciwa': 450, 'midnight': 1650, 'generalized': 1112, 'arms': 168, 'nnp': 1771, 'recieved': 2208, 'ventilatory': 2884, 'needle': 1742, 'ffp': 1015, 'gib': 1120, 'oozing': 1845, 'drop': 811, 'attempted': 214, 'paralyzed': 1917, 'despite': 701, 'intervention': 1374, 'withdraw': 2965, 'abp': 12, 'sites': 2467, 'coarse': 480, 'copious': 585, 'water': 2932, 'rising': 2325, 'tear': 2662, 'visiting': 2904, 'unsuccessful': 2835, 'withdrawn': 2967, 'suspect': 2614, 'bronchus': 341, 'silhouette': 2455, 'main': 1563, 'stem': 2542, 'dislocation': 760, 'hemothorax': 1201, 'exacerbation': 940, 'positioned': 2041, 'recommend': 2209, 'conduction': 538, 'delay': 678, 'extubated': 968, 'face': 973, 'tent': 2678, 'mri': 1696, 'extubation': 969, 'cuff': 626, 'leak': 1465, 'rapid': 2185, 'ruled': 2350, 'suggesting': 2596, 'pcwp': 1941, 'borderline': 316, 'filling': 1025, 'fellow': 1003, 'details': 704, 'fh': 1016, 'subacute': 2575, 'evolving': 937, 'tamponade': 2653, 'congestion': 544, 'ddx': 656, 'includes': 1309, 'viral': 2900, 'malignancy': 1574, 'closely': 467, 'therapeutic': 2688, 'tap': 2655, 'plans': 2004, 'opens': 1853, 'foot': 1066, 'facial': 974, 'bil': 281, 'tv': 2802, 'inserted': 1355, 'xray': 2986, 'cd': 404, 'amber': 95, 'triple': 2786, 'sterile': 2548, 'elbow': 861, 'visited': 2903, 'series': 2418, 'scheduled': 2382, 'mvr': 1718, 'heterogeneous': 1208, 'plaque': 2005, 'pvcs': 2156, 'fascicular': 985, 'positioning': 2042, 'perihilar': 1967, 'tissues': 2723, 'traumatic': 2776, 'pea': 1944, 'wed': 2942, 'maxillary': 1596, 'coronal': 590, 'sagittal': 2362, 'hypodensity': 1259, 'distribution': 773, 'configuration': 539, 'mucosal': 1701, 'ethmoid': 918, 'sphenoid': 2509, 'scalp': 2377, 'vf': 2895, 'rounded': 2336, 'run': 2351, 'thigh': 2697, 'monitored': 1677, 'ivc': 1401, 'compression': 530, 'ob': 1815, 'replaced': 2260, 'junctional': 1413, 'radiologist': 2180, 'thoracentesis': 2700, 'reflect': 2225, 'sized': 2471, 'title': 2724, 'hit': 1218, 'temporary': 2674, 'sc': 2375, 'continuous': 569, 'norepinephrine': 1784, 'operative': 1854, 'cyst': 642, 'married': 1586, 'lymphatic': 1554, 'supraclavicular': 2609, 'musculoskeletal': 1712, 'consolidations': 554, 'perfusion': 1964, 'displacement': 763, 'subsequent': 2584, 'anoxic': 121, 'reflex': 2226, 'involvement': 1388, 'uop': 2837, 'restraints': 2299, 'pnd': 2021, 'state': 2536, 'spontaneously': 2519, 'self': 2406, 'addition': 36, 'eating': 840, 'saturation': 2369, 'brown': 344, 'starting': 2533, 'far': 984, 'taking': 2652, 'causes': 395, 'reaction': 2195, 'died': 728, 'prostate': 2121, 'nameis': 1725, 'children': 434, 'round': 2335, 'mucous': 1702, 'nontender': 1782, 'splenomegaly': 2514, 'cranial': 613, 'touch': 2749, 'values': 2859, 'hematocrit': 1187, 'direct': 750, 'tox': 2751, 'linear': 1501, 'nodule': 1775, 'remote': 2251, 'tachypnea': 2647, 'speech': 2506, 'tongue': 2742, 'extremely': 964, 'breaths': 333, 'eventually': 933, 'added': 34, 'ards': 163, 'progressive': 2111, 'wide': 2957, 'wishes': 2964, 'sensitive': 2411, 'whether': 2955, 'hyperkalemia': 1250, 'protonix': 2128, 'adenopathy': 40, 'jvd': 1414, 'agitation': 67, 'presently': 2081, 'period': 1968, 'concern': 532, 'admissions': 49, 'swallow': 2624, 'endoscopy': 886, 'piv': 1997, 'ppx': 2057, 'regimen': 2234, 'swan': 2625, 'ganz': 1100, 'yesterday': 2992, 'depressions': 696, 'inferiorly': 1331, 'avl': 227, 'reveal': 2311, 'defect': 667, 'relative': 2242, 'apical': 141, 'septal': 2414, 'partially': 1926, 'vi': 2896, 'reconstructions': 2214, 'hep': 1202, 'angio': 112, 'contiguous': 564, 'fast': 987, 'nature': 1730, 'documented': 785, 'subsegmental': 2583, 'noncontrast': 1778, 'splenic': 2513, 'catheterization': 393, 'prefixes': 2066, 'discomfort': 754, 'ft': 1085, 'retention': 2304, 'furosemide': 1089, 'bid': 279, 'yrs': 2996, 'tropt': 2790, 'ckmb': 453, 'diastolic': 725, 'angiography': 114, 'lcx': 1458, 'rca': 2191, 'load': 1518, 'ce': 406, 'flat': 1044, 'etiologies': 919, 'rul': 2348, 'ip': 1391, 'adjust': 43, 'mn': 1667, 'docusate': 786, 'form': 1068, 'steroids': 2551, 'onc': 1840, 'biopsy': 291, 'maps': 1581, 'dropping': 813, 'lethargy': 1477, 'running': 2352, 'wrist': 2983, 'fine': 1032, 'situation': 2469, 'restarted': 2296, 'perrla': 1975, 'dilt': 746, 'swab': 2623, 'material': 1592, 'bm': 304, 'liter': 1509, 'recheck': 2207, 'remove': 2253, 'tolerates': 2738, 'possibility': 2044, 'beat': 260, 'exclude': 946, 'deviation': 712, 'ox': 1886, 'degree': 675, 'sb': 2371, 'mag': 1560, 'tol': 2734, 'qid': 2161, 'reconstruction': 2213, 'determine': 706, 'transient': 2769, 'board': 306, 'infiltrates': 1335, 'periventricular': 1972, 'ganglia': 1099, 'cortical': 595, 'diffusion': 738, 'weighted': 2947, 'applied': 153, 'vit': 2907, 'mom': 1672, 'ds': 818, 'make': 1569, 'cmo': 474, 'pronounced': 2118, 'pod': 2028, 'hepatitis': 1205, 'cefazolin': 407, 'dextrose': 714, 'dilaudid': 745, 'cordis': 587, 'stop': 2563, 'insufficiency': 1360, 'pts': 2139, 'np': 1796, 'supportive': 2608, 'confirm': 540, 'fell': 1002, 'dilantin': 741, 'embolization': 870, 'minimally': 1656, 'part': 1924, 'fem': 1005, 'qtc': 2164, 'nonspecific': 1781, 'prolonged': 2115, 'transition': 2770, 'pale': 1903, 'medial': 1613, 'withdraws': 2968, 'posturing': 2051, 'nipride': 1767, 'prednisone': 2064, 'rx': 2358, 'drink': 808, 'flutter': 1053, 'atenolol': 202, 'thin': 2698, 'encephalopathy': 879, 'screen': 2387, 'atrophy': 210, 'dehydration': 677, 'ivfs': 1403, 'sips': 2464, 'saw': 2370, 'physically': 1988, 'key': 1420, 'services': 2421, 'take': 2649, 'pos': 2039, 'persists': 1978, 'ongoing': 1842, 'remainder': 2247, 'deficits': 670, 'underwent': 2826, 'coiling': 487, 'close': 465, 'relief': 2245, 'nicardipine': 1764, 'zofran': 2997, 'encouraged': 881, 'ivp': 1404, 'improving': 1301, 'pleasant': 2009, 'evident': 936, 'marginal': 1582, 'predominantly': 2065, 'narrowing': 1727, 'av': 224, 'vea': 2871, 'weaning': 2941, 'mcgs': 1601, 'diuresis': 774, 'members': 1627, 'ep': 898, 'much': 1700, 'nonionic': 1780, 'nodules': 1776, 'characterized': 424, 'metastasis': 1636, 'enhancement': 889, 'segments': 2402, 'largest': 1446, 'gland': 1124, 'ribs': 2321, 'canal': 366, 'causing': 396, 'bones': 313, 'carcinoma': 373, 'bodies': 307, 'temps': 2675, 'gms': 1132, 'newborn': 1757, 'ercp': 908, 'transfusion': 2768, 'filter': 1028, 'esophageal': 910, 'demonstrating': 688, 'cbd': 401, 'levo': 1482, 'ampicillin': 101, 'smoker': 2487, 'nourished': 1794, 'epistaxis': 905, 'trachea': 2757, 'diffusely': 737, 'guarding': 1159, 'hypoactive': 1256, 'jaundice': 1406, 'occasional': 1827, 'kub': 1426, 'ileus': 1286, 'meropenem': 1631, 'stone': 2559, 'cholangitis': 437, 'comfortably': 506, 'sm': 2484, 'transported': 2772, 'leftward': 1468, 'term': 2679, 'nr': 1799, 'great': 1146, 'rupture': 2354, 'length': 1472, 'late': 1451, 'ckd': 452, 'cellulitis': 413, 'mdi': 1607, 'extubate': 967, 'cirrhosis': 447, 'thrombocytopenia': 2706, 'adm': 45, 'octreotide': 1833, 'gtts': 1156, 'tlc': 2728, 'hcts': 1173, 'qrs': 2162, 'precordial': 2063, 'helpful': 1185, 'go': 1133, 'noon': 1783, 'page': 1899, 'briefly': 335, 'svo': 2621, 'desats': 698, 'require': 2277, 'pn': 2019, 'gent': 1114, 'wk': 2972, 'periods': 1969, 'hypoxemia': 1269, 'lll': 1516, 'food': 1065, 'turn': 2799, 'husband': 1239, 'inc': 1303, 'decreasing': 664, 'resection': 2281, 'stenting': 2546, 'j': 1405, 'clots': 469, 'another': 120, 'concerns': 535, 'perforation': 1960, 'ge': 1109, 'scope': 2386, 'fi': 1017, 'sbt': 2374, 'nitro': 1768, 'takes': 2651, 'come': 503, 'return': 2309, 'immediate': 1294, 'duplex': 827, 'pel': 1951, 'lymphoma': 1555, 'chemo': 429, 'ductal': 823, 'faster': 988, 'evacuation': 923, 'potential': 2053, 'zone': 2998, 'insertion': 1356, 'pcp': 1940, 'flu': 1049, 'occ': 1826, 'usual': 2851, 'assistance': 195, 'consistently': 552, 'overbreathing': 1878, 'prelim': 2068, 'coffee': 485, 'encourage': 880, 'dad': 645, 'cares': 384, 'dev': 708, 'brachiocephalic': 322, 'combination': 502, 'aerated': 56, 'colored': 501, 'posteriorly': 2049, 'pac': 1892, 'fent': 1010, 'interim': 1367, 'uac': 2811, 'uvc': 2853, 'bicarbonate': 278, 'struck': 2570, 'sun': 2601, 'representing': 2273, 'informed': 1340, 'warfarin': 2928, 'ag': 62, 'mets': 1640, 'suspicion': 2616, 'curve': 632, 'makes': 1570, 'cover': 603, 'ideal': 1280, 'rll': 2330, 'lul': 1542, 'consistency': 550, 'visual': 2905, 'demand': 682, 'piperacillin': 1995, 'tazobactam': 2657, 'iu': 1399, 'problem': 2099, 'hypoglycemia': 1260, 'colectomy': 490, 'wasting': 2931, 'stand': 2528, 'purposeful': 2153, 'brbpr': 328, 'maintaining': 1566, 'await': 230, 'pivs': 1998, 'fixed': 1040, 'labile': 1432, 'peg': 1950, 'lethargic': 1476, 'liquid': 1505, 'loose': 1530, 'anterolateral': 125, 'demographics': 684, 'trigger': 2784, 'triggering': 2785, 'tests': 2685, 'recons': 2212, 'mva': 1714, 'contusions': 579, 'delayed': 679, 'duodenum': 826, 'laceration': 1436, 'pole': 2030, 'intraperitoneal': 1381, 'extravasation': 963, 'reformats': 2229, 'contusion': 578, 'fossa': 1070, 'malalignment': 1572, 'formation': 1069, 'lip': 1503, 'rhonchorous': 2318, 'clubbing': 471, 'attentive': 218, 'obvious': 1825, 'xrt': 2987, 'reveals': 2313, 'bronchial': 339, 'liquids': 1506, 'ionized': 1390, 'sugars': 2593, 'mrsa': 1697, 'precautions': 2062, 'disc': 751, 'particularly': 1927, 'bony': 314, 'prevertebral': 2091, 'midazolam': 1647, 'fibrinogen': 1020, 'avr': 229, 'collapse': 492, 'preop': 2073, 'mediastinum': 1616, 'resulting': 2301, 'appetite': 152, 'overnoc': 1883, 'flatus': 1045, 'eve': 928, 'hiv': 1219, 'appreciate': 154, 'months': 1681, 'discontinued': 755, 'influenza': 1338, 'pepcid': 1956, 'patients': 1936, 'prbcs': 2060, 'solumedrol': 2493, 'vol': 2913, 'bronchoscopy': 340, 'instability': 1358, 'press': 2084, 'meningitis': 1628, 'satisfactory': 2367, 'detected': 705, 'dizziness': 777, 'increasingly': 1315, 'quickly': 2170, 'dopa': 788, 'anteriorly': 124, 'mod': 1668, 'bloody': 303, 'perform': 1961, 'integrity': 1364, 'lle': 1515, 'rle': 2329, 'projects': 2113, 'capsule': 371, 'table': 2641, 'aaa': 0, 'retired': 2305, 'living': 1514, 'nutritional': 1814, 'system': 2635, 'chemotherapy': 430, 'nodular': 1774, 'congestive': 545, 'closed': 466, 'embolus': 871, 'hypovolemia': 1268, 'factors': 976, 'holding': 1223, 'lavage': 1455, 'cycle': 641, 'pneumoboots': 2022, 'tumor': 2798, 'sda': 2388, 'magnevist': 1562, 'gadolinium': 1093, 'enhancing': 890, 'csf': 622, 'tracheostomy': 2759, 'transports': 2773, 'destination': 702, 'imaged': 1291, 'postoperative': 2050, 'medication': 1619, 'took': 2744, 'collections': 496, 'passing': 1929, 'torso': 2746, 'lactulose': 1440, 'alcoholic': 79, 'paracentesis': 1916, 'subtle': 2586, 'renally': 2256, 'signed': 2451, 'esophagus': 911, 'ptx': 2141, 'revised': 2316, 'coccyx': 482, 'house': 1229, 'edematous': 849, 'oxygenation': 1889, 'persist': 1976, 'reformations': 2228, 'fibrosis': 1021, 'tracheal': 2758, 'reactions': 2196, 'qd': 2159, 'diverticulitis': 775, 'intrahepatic': 1379, 'failed': 977, 'diltiazem': 747, 'dsd': 819, 'intermittently': 1369, 'lp': 1537, 'tach': 2643, 'tsh': 2792, 'abscess': 13, 'febrile': 994, 'signal': 2450, 'echogenic': 845, 'reduced': 2223, 'ams': 103, 'sludge': 2482, 'umbilical': 2818, 'rue': 2347, 'eye': 970, 'pull': 2143, 'branches': 327, 'axillary': 235, 'hyperdense': 1246, 'defined': 671, 'mv': 1713, 'toilet': 2733, 'cream': 615, 'melanoma': 1624, 'falls': 981, 'lnc': 1517, 'workup': 2976, 'allergy': 85, 'vomited': 2917, 'result': 2300, 'cocaine': 481, 'characterize': 423, 'neoplasm': 1748, 'territorial': 2682, 'protect': 2123, 'eeg': 850, 'chordae': 441, 'tips': 2721, 'amps': 102, 'preterm': 2090, 'fetal': 1012, 'apgars': 140, 'fistula': 1038, 'subjective': 2581, 'hematemesis': 1186, 'friend': 1082, 'foramen': 1067, 'pneumocephalus': 2023, 'approach': 156, 'bnp': 305, 'containing': 562, 'beginning': 270, 'convexity': 580, 'cleared': 458, 'told': 2735, 'hs': 1234, 'craniotomy': 614, 'tab': 2640, 'radiation': 2177, 'outpatient': 1874, 'malignant': 1575, 'hyperglycemia': 1249, 'growth': 1153, 'unless': 2830, 'feed': 995, 'hcv': 1174, 'kept': 1419, 'lightheadedness': 1493, 'developing': 710, 'latest': 1454, 'valuables': 2857, 'wallet': 2925, 'money': 1675, 'listed': 1508, 'levothyroxine': 1485, 'monday': 1674, 'gravity': 1145, 'opening': 1852, 'acyclovir': 32, 'lovenox': 1534, 'erythema': 909, 'injuries': 1350, 'asymmetric': 199, 'flair': 1042, 'hemisphere': 1193, 'ventilated': 2881, 'segmental': 2401, 'gain': 1095, 'micro': 1643, 'include': 1307, 'prepped': 2075, 'draped': 804, 'fashion': 986, 'local': 1522, 'guidance': 1161, 'reg': 2232, 'drops': 814, 'percussion': 1959, 'drinking': 809, 'dtr': 821, 'grunting': 1154, 'obesity': 1817, 'plts': 2014, 'hypo': 1255, 'lft': 1487, 'heard': 1179, 'bcx': 259, 'antibx': 130, 'trial': 2782, 'aga': 63, 'ex': 939, 'infusion': 1342, 'ends': 888, 'widening': 2959, 'dictation': 727, 'hyponatremia': 1262, 'caring': 388, 'pca': 1938, 'infarcts': 1327, 'inflammation': 1336, 'asd': 184, 'epigastric': 901, 'diverticulosis': 776, 'overt': 1884, 'sluggish': 2483, 'tracking': 2761, 'ab': 1, 'spont': 2517, 'especially': 912, 'overweight': 1885, 'parameters': 1918, 'asymptomatic': 200, 'alignment': 81, 'lac': 1435, 'deformity': 673, 'epinephrine': 902, 'akinesis': 74, 'atheroma': 203, 'appendage': 151, 'pitting': 1996, 'legionella': 1470, 'recorded': 2216, 'spells': 2507, 'observed': 1820, 'sbo': 2372, 'colonic': 498, 'cooling': 582, 'dka': 778, 'labor': 1433, 'incompletely': 1311, 'pls': 2012, 'gout': 1139, 'inferoseptal': 1333, 'clinic': 460, 'peaked': 1946, 'hyperdensity': 1247, 'multilevel': 1705, 'bactrim': 244, 'value': 2858, 'gif': 1121}\n",
      "<class 'sklearn.feature_extraction.text.CountVectorizer'>\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(vect.vocabulary_)\n",
    "print(type(vect))\n",
    "print(vect.fixed_vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HADM_ID</th>\n",
       "      <th>SUBJECT_ID</th>\n",
       "      <th>ADMITTIME</th>\n",
       "      <th>HOSPITAL_EXPIRE_FLAG</th>\n",
       "      <th>CHARTDATE</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>TEXT</th>\n",
       "      <th>ENDTIME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>156361</td>\n",
       "      <td>1822</td>\n",
       "      <td>2148-07-08 13:25:00</td>\n",
       "      <td>1</td>\n",
       "      <td>2148-07-08 00:00:00</td>\n",
       "      <td>Nursing/other</td>\n",
       "      <td>NSG ADMIT NOTE: PT IS AN 86Y/O MALE WHO WAS AT...</td>\n",
       "      <td>2148-07-09 13:25:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>182221</td>\n",
       "      <td>48374</td>\n",
       "      <td>2116-11-08 08:31:00</td>\n",
       "      <td>1</td>\n",
       "      <td>2116-11-09 00:00:00</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2116-11-9**] 1:09 PM  CHEST (PORTABLE AP); ...</td>\n",
       "      <td>2116-11-09 08:31:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>148295</td>\n",
       "      <td>17863</td>\n",
       "      <td>2144-01-28 20:18:00</td>\n",
       "      <td>1</td>\n",
       "      <td>2144-01-28 00:00:00</td>\n",
       "      <td>ECG</td>\n",
       "      <td>Indeterminate supraventricular rhtyhm with sli...</td>\n",
       "      <td>2144-01-29 20:18:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>110348</td>\n",
       "      <td>6258</td>\n",
       "      <td>2124-12-24 12:38:00</td>\n",
       "      <td>1</td>\n",
       "      <td>2124-12-24 00:00:00</td>\n",
       "      <td>Physician</td>\n",
       "      <td>Chief Complaint:  Transfer from [**Hospital1 3...</td>\n",
       "      <td>2124-12-25 12:38:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>130611</td>\n",
       "      <td>53858</td>\n",
       "      <td>2121-11-25 22:49:00</td>\n",
       "      <td>1</td>\n",
       "      <td>2121-11-25 00:00:00</td>\n",
       "      <td>Radiology</td>\n",
       "      <td>[**2121-11-25**] 9:11 PM  CT ABDOMEN W/O CONTR...</td>\n",
       "      <td>2121-11-26 22:49:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   HADM_ID  SUBJECT_ID            ADMITTIME  HOSPITAL_EXPIRE_FLAG  \\\n",
       "0   156361        1822  2148-07-08 13:25:00                     1   \n",
       "1   182221       48374  2116-11-08 08:31:00                     1   \n",
       "2   148295       17863  2144-01-28 20:18:00                     1   \n",
       "3   110348        6258  2124-12-24 12:38:00                     1   \n",
       "4   130611       53858  2121-11-25 22:49:00                     1   \n",
       "\n",
       "             CHARTDATE       CATEGORY  \\\n",
       "0  2148-07-08 00:00:00  Nursing/other   \n",
       "1  2116-11-09 00:00:00      Radiology   \n",
       "2  2144-01-28 00:00:00            ECG   \n",
       "3  2124-12-24 00:00:00     Physician    \n",
       "4  2121-11-25 00:00:00      Radiology   \n",
       "\n",
       "                                                TEXT              ENDTIME  \n",
       "0  NSG ADMIT NOTE: PT IS AN 86Y/O MALE WHO WAS AT...  2148-07-09 13:25:00  \n",
       "1  [**2116-11-9**] 1:09 PM  CHEST (PORTABLE AP); ...  2116-11-09 08:31:00  \n",
       "2  Indeterminate supraventricular rhtyhm with sli...  2144-01-29 20:18:00  \n",
       "3  Chief Complaint:  Transfer from [**Hospital1 3...  2124-12-25 12:38:00  \n",
       "4  [**2121-11-25**] 9:11 PM  CT ABDOMEN W/O CONTR...  2121-11-26 22:49:00  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train_final.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can get an idea of the frequency of words for positive vs negative mortality. This section was based on code from https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-2-333514854913"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pt</th>\n",
       "      <td>48578</td>\n",
       "      <td>54646</td>\n",
       "      <td>103224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>left</th>\n",
       "      <td>39894</td>\n",
       "      <td>48259</td>\n",
       "      <td>88153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>right</th>\n",
       "      <td>35534</td>\n",
       "      <td>45945</td>\n",
       "      <td>81479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>36137</td>\n",
       "      <td>40619</td>\n",
       "      <td>76756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mg</th>\n",
       "      <td>32714</td>\n",
       "      <td>30161</td>\n",
       "      <td>62875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ml</th>\n",
       "      <td>29879</td>\n",
       "      <td>25869</td>\n",
       "      <td>55748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hospital</th>\n",
       "      <td>24828</td>\n",
       "      <td>29068</td>\n",
       "      <td>53896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>patient</th>\n",
       "      <td>24193</td>\n",
       "      <td>29639</td>\n",
       "      <td>53832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l</th>\n",
       "      <td>27150</td>\n",
       "      <td>25320</td>\n",
       "      <td>52470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reason</th>\n",
       "      <td>22402</td>\n",
       "      <td>27819</td>\n",
       "      <td>50221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pm</th>\n",
       "      <td>22828</td>\n",
       "      <td>26602</td>\n",
       "      <td>49430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clip</th>\n",
       "      <td>22141</td>\n",
       "      <td>27110</td>\n",
       "      <td>49251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chest</th>\n",
       "      <td>23621</td>\n",
       "      <td>25181</td>\n",
       "      <td>48802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>normal</th>\n",
       "      <td>27351</td>\n",
       "      <td>20950</td>\n",
       "      <td>48301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p</th>\n",
       "      <td>25003</td>\n",
       "      <td>22945</td>\n",
       "      <td>47948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>w</th>\n",
       "      <td>22774</td>\n",
       "      <td>24950</td>\n",
       "      <td>47724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>24671</td>\n",
       "      <td>22600</td>\n",
       "      <td>47271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ct</th>\n",
       "      <td>20159</td>\n",
       "      <td>26800</td>\n",
       "      <td>46959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last</th>\n",
       "      <td>21843</td>\n",
       "      <td>23003</td>\n",
       "      <td>44846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>contrast</th>\n",
       "      <td>18624</td>\n",
       "      <td>23496</td>\n",
       "      <td>42120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          negative  positive   total\n",
       "pt           48578     54646  103224\n",
       "left         39894     48259   88153\n",
       "right        35534     45945   81479\n",
       "name         36137     40619   76756\n",
       "mg           32714     30161   62875\n",
       "ml           29879     25869   55748\n",
       "hospital     24828     29068   53896\n",
       "patient      24193     29639   53832\n",
       "l            27150     25320   52470\n",
       "reason       22402     27819   50221\n",
       "pm           22828     26602   49430\n",
       "clip         22141     27110   49251\n",
       "chest        23621     25181   48802\n",
       "normal       27351     20950   48301\n",
       "p            25003     22945   47948\n",
       "w            22774     24950   47724\n",
       "c            24671     22600   47271\n",
       "ct           20159     26800   46959\n",
       "last         21843     23003   44846\n",
       "contrast     18624     23496   42120"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Next visualize find the most frequent words.\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "neg_doc_matrix = vect.transform(df_train_final[df_train_final.HOSPITAL_EXPIRE_FLAG == 0].TEXT)\n",
    "pos_doc_matrix = vect.transform(df_train_final[df_train_final.HOSPITAL_EXPIRE_FLAG == 1].TEXT)\n",
    "neg_tf = np.sum(neg_doc_matrix,axis=0)\n",
    "pos_tf = np.sum(pos_doc_matrix,axis=0)\n",
    "neg = np.squeeze(np.asarray(neg_tf))\n",
    "pos = np.squeeze(np.asarray(pos_tf))\n",
    "\n",
    "term_freq_df = pd.DataFrame([neg,pos],columns=vect.get_feature_names()).transpose()\n",
    "term_freq_df.columns = ['negative', 'positive']\n",
    "term_freq_df['total'] = term_freq_df['negative'] + term_freq_df['positive']\n",
    "term_freq_df.sort_values(by='total', ascending=False).iloc[:20]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create a series from the sparse matrix\n",
    "d = pd.Series(term_freq_df.total, \n",
    "              index = term_freq_df.index).sort_values(ascending=False)\n",
    "\n",
    "#Visualize the 100 most frequent words in the text\n",
    "ax = d[:50].plot(kind='bar', figsize=(10,6), width=.8, fontsize=14, rot=90,color = 'b')\n",
    "ax.title.set_size(18)\n",
    "plt.title('Most Frequent Words in Caregiver Notes')\n",
    "plt.ylabel('count')\n",
    "plt.show()\n",
    "ax = d[50:100].plot(kind='bar', figsize=(10,6), width=.8, fontsize=14, rot=90,color = 'b')\n",
    "ax.title.set_size(18)\n",
    "plt.ylabel('count')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#with np.printoptions(threshold=np.inf):\n",
    " #   print(neg_doc_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "stopwords_updated = list(stopwords) + ['pt', 'left', 'right', 'name','patient', 'p','w','c']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add the list of stop words as an argument for CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "CountVectorizer(max_features=3000,\n",
       "                stop_words=[\"she's\", 'himself', 'couldn', 'here', 'what', 'of',\n",
       "                            'mightn', \"should've\", 'mustn', 'will', 'further',\n",
       "                            \"shan't\", 'because', 'after', 'if', 'y', 'herself',\n",
       "                            'an', 'ma', 'is', 'under', \"haven't\", 'who', 'them',\n",
       "                            'than', 'up', \"wasn't\", 'you', 'then', 'or', ...],\n",
       "                tokenizer=<function text_tokenizer at 0x000001C75AB950D0>)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "vect = CountVectorizer(max_features = 3000, \n",
    "                       tokenizer = text_tokenizer, \n",
    "                       stop_words = stopwords_updated)\n",
    "# this will take a while\n",
    "vect.fit(df_train_final.TEXT.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mg</th>\n",
       "      <td>32714</td>\n",
       "      <td>30161</td>\n",
       "      <td>62875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ml</th>\n",
       "      <td>29879</td>\n",
       "      <td>25869</td>\n",
       "      <td>55748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hospital</th>\n",
       "      <td>24828</td>\n",
       "      <td>29068</td>\n",
       "      <td>53896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l</th>\n",
       "      <td>27150</td>\n",
       "      <td>25320</td>\n",
       "      <td>52470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reason</th>\n",
       "      <td>22402</td>\n",
       "      <td>27819</td>\n",
       "      <td>50221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pm</th>\n",
       "      <td>22828</td>\n",
       "      <td>26602</td>\n",
       "      <td>49430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clip</th>\n",
       "      <td>22141</td>\n",
       "      <td>27110</td>\n",
       "      <td>49251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chest</th>\n",
       "      <td>23621</td>\n",
       "      <td>25181</td>\n",
       "      <td>48802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>normal</th>\n",
       "      <td>27351</td>\n",
       "      <td>20950</td>\n",
       "      <td>48301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ct</th>\n",
       "      <td>20159</td>\n",
       "      <td>26800</td>\n",
       "      <td>46959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>last</th>\n",
       "      <td>21843</td>\n",
       "      <td>23003</td>\n",
       "      <td>44846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>contrast</th>\n",
       "      <td>18624</td>\n",
       "      <td>23496</td>\n",
       "      <td>42120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>plan</th>\n",
       "      <td>19649</td>\n",
       "      <td>17527</td>\n",
       "      <td>37176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hr</th>\n",
       "      <td>18406</td>\n",
       "      <td>18259</td>\n",
       "      <td>36665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>old</th>\n",
       "      <td>16338</td>\n",
       "      <td>19351</td>\n",
       "      <td>35689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pain</th>\n",
       "      <td>21736</td>\n",
       "      <td>13902</td>\n",
       "      <td>35638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>history</th>\n",
       "      <td>16733</td>\n",
       "      <td>17667</td>\n",
       "      <td>34400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <td>15273</td>\n",
       "      <td>18310</td>\n",
       "      <td>33583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>given</th>\n",
       "      <td>15936</td>\n",
       "      <td>17638</td>\n",
       "      <td>33574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>assessment</th>\n",
       "      <td>15646</td>\n",
       "      <td>15889</td>\n",
       "      <td>31535</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            negative  positive  total\n",
       "mg             32714     30161  62875\n",
       "ml             29879     25869  55748\n",
       "hospital       24828     29068  53896\n",
       "l              27150     25320  52470\n",
       "reason         22402     27819  50221\n",
       "pm             22828     26602  49430\n",
       "clip           22141     27110  49251\n",
       "chest          23621     25181  48802\n",
       "normal         27351     20950  48301\n",
       "ct             20159     26800  46959\n",
       "last           21843     23003  44846\n",
       "contrast       18624     23496  42120\n",
       "plan           19649     17527  37176\n",
       "hr             18406     18259  36665\n",
       "old            16338     19351  35689\n",
       "pain           21736     13902  35638\n",
       "history        16733     17667  34400\n",
       "year           15273     18310  33583\n",
       "given          15936     17638  33574\n",
       "assessment     15646     15889  31535"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Again visualize find the most frequent words.\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "neg_doc_matrix = vect.transform(df_train_final[df_train_final.HOSPITAL_EXPIRE_FLAG == 0].TEXT)\n",
    "pos_doc_matrix = vect.transform(df_train_final[df_train_final.HOSPITAL_EXPIRE_FLAG == 1].TEXT)\n",
    "neg_tf = np.sum(neg_doc_matrix,axis=0)\n",
    "pos_tf = np.sum(pos_doc_matrix,axis=0)\n",
    "neg = np.squeeze(np.asarray(neg_tf))\n",
    "pos = np.squeeze(np.asarray(pos_tf))\n",
    "\n",
    "term_freq_df = pd.DataFrame([neg,pos],columns=vect.get_feature_names()).transpose()\n",
    "term_freq_df.columns = ['negative', 'positive']\n",
    "term_freq_df['total'] = term_freq_df['negative'] + term_freq_df['positive']\n",
    "term_freq_df.sort_values(by='total', ascending=False).iloc[:20]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Again Create a series from the sparse matrix\n",
    "d = pd.Series(term_freq_df.total, \n",
    "              index = term_freq_df.index).sort_values(ascending=False)\n",
    "\n",
    "#Visualize the 100 most frequent words in the text\n",
    "ax = d[:50].plot(kind='bar', figsize=(10,6), width=.8, fontsize=14, rot=90,color = 'b')\n",
    "ax.title.set_size(18)\n",
    "plt.title('Most Frequent Words in Caregiver Notes')\n",
    "plt.ylabel('count')\n",
    "plt.show()\n",
    "ax = d[50:100].plot(kind='bar', figsize=(10,6), width=.8, fontsize=14, rot=90,color = 'b')\n",
    "ax.title.set_size(18)\n",
    "plt.ylabel('count')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Transform the text samples into vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_vect = vect.transform(df_train_final.TEXT.values)\n",
    "X_valid_vect = vect.transform(df_valid.TEXT.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(68490, 3000)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_vect.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get labels (target variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = df_train_final.HOSPITAL_EXPIRE_FLAG\n",
    "y_valid = df_valid.HOSPITAL_EXPIRE_FLAG"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Step 3: Build a simple predictive model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(random_state=42)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# logistic regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "clf=LogisticRegression(random_state = 42, solver='lbfgs')\n",
    "clf.fit(X_train_vect, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import other models for evaluation\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "#from libxgboost import XGBClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "rf = RandomForestClassifier(random_state=42, n_estimators=100)\n",
    "knn =  KNeighborsClassifier()\n",
    "svm = SVC(random_state=42, gamma='auto')\n",
    "gnb = GaussianNB()\n",
    "#xgboost = XGBClassifier(random_state=42)\n",
    "\n",
    "\n",
    "#rf.fit(X_train_vect, y_train)\n",
    "\n",
    "\n",
    "#knn.fit(X_train_vect, y_train)\n",
    "\n",
    "#svm.fit(X_train_vect, y_train)\n",
    "\n",
    "gnb.fit(X_train_vect.toarray(), y_train)\n",
    "\n",
    "#xgboost.fit(X_train_vect, y_train)\n",
    "#y_pred = xgboost.predict(X_test_scaled)\n",
    "#print(\"XGBoost: \", xgboost.score(X_test_scaled, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate probability of death - other models took too long, so continued on only with logistic regression and naive bayes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = clf\n",
    "y_train_preds = model.predict_proba(X_train_vect)[:,1]\n",
    "y_valid_preds = model.predict_proba(X_valid_vect)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = gnb\n",
    "y_train_preds_gnb = model.predict_proba(X_train_vect.toarray())[:,1]\n",
    "y_valid_preds_gnb = model.predict_proba(X_valid_vect.toarray())[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 1 1 1 0 0 0 0 1]\n",
      "[7.56882037e-01 6.14849412e-01 6.41002700e-01 9.90711476e-01\n",
      " 7.59401056e-01 7.39102779e-01 5.62297285e-01 8.37652759e-02\n",
      " 1.26228910e-05 7.64528372e-01]\n"
     ]
    }
   ],
   "source": [
    "#Print mortality predictions for the first 10 samples in the training set\n",
    "print(y_train[:10].values)\n",
    "print(y_train_preds[:10])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate performance metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_accuracy(y_actual, y_pred, thresh):\n",
    "    # this function calculates the accuracy with probability threshold at thresh\n",
    "    return (sum((y_pred > thresh) & (y_actual == 1))+sum((y_pred < thresh) & (y_actual == 0))) /len(y_actual)\n",
    "\n",
    "def calc_recall(y_actual, y_pred, thresh):\n",
    "    # calculates the recall\n",
    "    return sum((y_pred > thresh) & (y_actual == 1)) /sum(y_actual)\n",
    "\n",
    "def calc_precision(y_actual, y_pred, thresh):\n",
    "    # calculates the precision\n",
    "    return sum((y_pred > thresh) & (y_actual == 1)) /sum(y_pred > thresh)\n",
    "\n",
    "def calc_specificity(y_actual, y_pred, thresh):\n",
    "    # calculates specificity\n",
    "    return sum((y_pred < thresh) & (y_actual == 0)) /sum(y_actual ==0)\n",
    "\n",
    "def calc_prevalence(y_actual):\n",
    "    # calculates prevalence\n",
    "    return sum((y_actual == 1)) /len(y_actual)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Logistic Regression Performance Metrics\n",
      "\n",
      "Train AUC:0.832\n",
      "Valid AUC:0.791\n",
      "Train accuracy:0.745\n",
      "Valid accuracy:0.710\n",
      "Train recall:0.753\n",
      "Valid recall:0.711\n",
      "Train precision:0.741\n",
      "Valid precision:0.237\n",
      "Train specificity:0.737\n",
      "Valid specificity:0.709\n",
      "Train prevalence:0.500\n",
      "Valid prevalence:0.113\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#LOGISTIC REGRESSION\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "fpr_train, tpr_train, thresholds_train = roc_curve(y_train, y_train_preds)\n",
    "fpr_valid, tpr_valid, thresholds_valid = roc_curve(y_valid, y_valid_preds)\n",
    "\n",
    "\n",
    "thresh = 0.5\n",
    "\n",
    "auc_train = roc_auc_score(y_train, y_train_preds)\n",
    "auc_valid = roc_auc_score(y_valid, y_valid_preds)\n",
    "\n",
    "print(\"\\nLogistic Regression Performance Metrics\\n\")\n",
    "print('Train AUC:%.3f'%auc_train)\n",
    "print('Valid AUC:%.3f'%auc_valid)\n",
    "\n",
    "print('Train accuracy:%.3f'%calc_accuracy(y_train, y_train_preds, thresh))\n",
    "print('Valid accuracy:%.3f'%calc_accuracy(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "\n",
    "print('Train recall:%.3f'%calc_recall(y_train, y_train_preds, thresh))\n",
    "print('Valid recall:%.3f'%calc_recall(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "print('Train precision:%.3f'%calc_precision(y_train, y_train_preds, thresh))\n",
    "print('Valid precision:%.3f'%calc_precision(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "print('Train specificity:%.3f'%calc_specificity(y_train, y_train_preds, thresh))\n",
    "print('Valid specificity:%.3f'%calc_specificity(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "print('Train prevalence:%.3f'%calc_prevalence(y_train))\n",
    "print('Valid prevalence:%.3f'%calc_prevalence(y_valid))\n",
    "\n",
    "\n",
    "plt.plot(fpr_train, tpr_train,'r-', label = 'Train AUC: %.2f'%auc_train)\n",
    "plt.plot(fpr_valid, tpr_valid,'b-',label = 'Valid AUC: %.2f'%auc_valid)\n",
    "plt.plot([0,1],[0,1],'-k')\n",
    "plt.title('Logistic Regression AUC-ROC')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Naive Bayes Performance Metrics\n",
      "\n",
      "Train AUC:0.733\n",
      "Valid AUC:0.791\n",
      "Train accuracy:0.657\n",
      "Valid accuracy:0.710\n",
      "Train recall:0.548\n",
      "Valid recall:0.711\n",
      "Train precision:0.701\n",
      "Valid precision:0.237\n",
      "Train specificity:0.766\n",
      "Valid specificity:0.709\n",
      "Train prevalence:0.500\n",
      "Valid prevalence:0.113\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#GNB\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "fpr_train, tpr_train, thresholds_train = roc_curve(y_train, y_train_preds_gnb)\n",
    "fpr_valid, tpr_valid, thresholds_valid = roc_curve(y_valid, y_valid_preds)\n",
    "\n",
    "\n",
    "thresh = 0.5\n",
    "\n",
    "auc_train = roc_auc_score(y_train, y_train_preds_gnb)\n",
    "auc_valid = roc_auc_score(y_valid, y_valid_preds)\n",
    "print(\"\\nNaive Bayes Performance Metrics\\n\")\n",
    "print('Train AUC:%.3f'%auc_train)\n",
    "print('Valid AUC:%.3f'%auc_valid)\n",
    "\n",
    "print('Train accuracy:%.3f'%calc_accuracy(y_train, y_train_preds_gnb, thresh))\n",
    "print('Valid accuracy:%.3f'%calc_accuracy(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "\n",
    "print('Train recall:%.3f'%calc_recall(y_train, y_train_preds_gnb, thresh))\n",
    "print('Valid recall:%.3f'%calc_recall(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "print('Train precision:%.3f'%calc_precision(y_train, y_train_preds_gnb, thresh))\n",
    "print('Valid precision:%.3f'%calc_precision(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "print('Train specificity:%.3f'%calc_specificity(y_train, y_train_preds_gnb, thresh))\n",
    "print('Valid specificity:%.3f'%calc_specificity(y_valid, y_valid_preds, thresh))\n",
    "\n",
    "print('Train prevalence:%.3f'%calc_prevalence(y_train))\n",
    "print('Valid prevalence:%.3f'%calc_prevalence(y_valid))\n",
    "\n",
    "\n",
    "plt.plot(fpr_train, tpr_train,'r-', label = 'Train AUC: %.2f'%auc_train)\n",
    "plt.plot(fpr_valid, tpr_valid,'b-',label = 'Valid AUC: %.2f'%auc_valid)\n",
    "plt.plot([0,1],[0,1],'-k')\n",
    "plt.title('Naive Bayes AUC-ROC')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Since the performance metrics results and AUC-ROC fared better with Logistic Regression, that will be the model of choice for the remainder of this project.\n",
    "#### The remainder of this analysis will focus on feature engineering and hyperparameter optimization in order to create a stronger algorithm to predict mortality. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "#First find the features that the classifier is using to make decisions:\n",
    "\n",
    "def get_most_important_features(vectorizer, model, n=5):\n",
    "    index_to_word = {v:k for k,v in vectorizer.vocabulary_.items()}\n",
    "    \n",
    "    # loop for each class\n",
    "    classes ={}\n",
    "    for class_index in range(model.coef_.shape[0]):\n",
    "        word_importances = [(el, index_to_word[i]) for i,el in enumerate(model.coef_[class_index])]\n",
    "        sorted_coeff = sorted(word_importances, key = lambda x : x[0], reverse=True)\n",
    "        tops = sorted(sorted_coeff[:n], key = lambda x : x[0])\n",
    "        bottom = sorted_coeff[-n:]\n",
    "        classes[class_index] = {\n",
    "            'tops':tops,\n",
    "            'bottom':bottom\n",
    "        }\n",
    "    return classes\n",
    "\n",
    "importance = get_most_important_features(vect, clf, 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Next, plot the most important features\n",
    "\n",
    "def plot_important_words(top_scores, top_words, bottom_scores, bottom_words, name):\n",
    "    y_pos = np.arange(len(top_words))\n",
    "    top_pairs = [(a,b) for a,b in zip(top_words, top_scores)]\n",
    "    top_pairs = sorted(top_pairs, key=lambda x: x[1])\n",
    "    \n",
    "    bottom_pairs = [(a,b) for a,b in zip(bottom_words, bottom_scores)]\n",
    "    bottom_pairs = sorted(bottom_pairs, key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    top_words = [a[0] for a in top_pairs]\n",
    "    top_scores = [a[1] for a in top_pairs]\n",
    "    \n",
    "    bottom_words = [a[0] for a in bottom_pairs]\n",
    "    bottom_scores = [a[1] for a in bottom_pairs]\n",
    "    \n",
    "    fig = plt.figure(figsize=(10, 15))  \n",
    "\n",
    "    plt.subplot(121)\n",
    "    plt.barh(y_pos,bottom_scores, align='center', alpha=0.5)\n",
    "    plt.title('Negative', fontsize=20)\n",
    "    plt.yticks(y_pos, bottom_words, fontsize=14)\n",
    "    plt.suptitle('Key words', fontsize=16)\n",
    "    plt.xlabel('Importance', fontsize=20)\n",
    "    \n",
    "    plt.subplot(122)\n",
    "    plt.barh(y_pos,top_scores, align='center', alpha=0.5)\n",
    "    plt.title('Positive', fontsize=20)\n",
    "    plt.yticks(y_pos, top_words, fontsize=14)\n",
    "    plt.suptitle(name, fontsize=16)\n",
    "    plt.xlabel('Importance', fontsize=20)\n",
    "    \n",
    "    plt.subplots_adjust(wspace=0.8)\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "  \n",
    "top_scores = [a[0] for a in importance[0]['tops']]\n",
    "top_words = [a[1] for a in importance[0]['tops']]\n",
    "bottom_scores = [a[0] for a in importance[0]['bottom']]\n",
    "bottom_words = [a[1] for a in importance[0]['bottom']]\n",
    "\n",
    "plot_important_words(top_scores, top_words, bottom_scores, bottom_words, \"Most important words\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "'Expired' is very high in the list, therefore will try removing patients who expired within 24 hours of admission."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import learning_curve\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "\n",
    "\n",
    "def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n",
    "                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n",
    "    \"\"\"\n",
    "    Generate a simple plot of the test and training learning curve.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    estimator : object type that implements the \"fit\" and \"predict\" methods\n",
    "        An object of that type which is cloned for each validation.\n",
    "\n",
    "    title : string\n",
    "        Title for the chart.\n",
    "\n",
    "    X : array-like, shape (n_samples, n_features)\n",
    "        Training vector, where n_samples is the number of samples and\n",
    "        n_features is the number of features.\n",
    "\n",
    "    y : array-like, shape (n_samples) or (n_samples, n_features), optional\n",
    "        Target relative to X for classification or regression;\n",
    "        None for unsupervised learning.\n",
    "\n",
    "    ylim : tuple, shape (ymin, ymax), optional\n",
    "        Defines minimum and maximum yvalues plotted.\n",
    "\n",
    "    cv : int, cross-validation generator or an iterable, optional\n",
    "        Determines the cross-validation splitting strategy.\n",
    "        Possible inputs for cv are:\n",
    "          - None, to use the default 3-fold cross-validation,\n",
    "          - integer, to specify the number of folds.\n",
    "          - An object to be used as a cross-validation generator.\n",
    "          - An iterable yielding train/test splits.\n",
    "\n",
    "        For integer/None inputs, if ``y`` is binary or multiclass,\n",
    "        :class:`StratifiedKFold` used. If the estimator is not a classifier\n",
    "        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n",
    "\n",
    "        Refer :ref:`User Guide <cross_validation>` for the various\n",
    "        cross-validators that can be used here.\n",
    "\n",
    "    n_jobs : integer, optional\n",
    "        Number of jobs to run in parallel (default 1).\n",
    "        \"\"\"\n",
    "    plt.figure()\n",
    "    plt.title(title)\n",
    "    if ylim is not None:\n",
    "        plt.ylim(*ylim)\n",
    "    plt.xlabel(\"Number of Training examples\")\n",
    "    plt.ylabel(\"AUC\")\n",
    "    train_sizes, train_scores, test_scores = learning_curve(\n",
    "        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, scoring = 'roc_auc')\n",
    "    train_scores_mean = np.mean(train_scores, axis=1)\n",
    "    train_scores_std = np.std(train_scores, axis=1)\n",
    "    test_scores_mean = np.mean(test_scores, axis=1)\n",
    "    test_scores_std = np.std(test_scores, axis=1)\n",
    "    plt.grid()\n",
    "\n",
    "    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n",
    "                     train_scores_mean + train_scores_std, alpha=0.1,\n",
    "                     color=\"r\")\n",
    "    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n",
    "                     test_scores_mean + test_scores_std, alpha=0.1, color=\"b\")\n",
    "    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n",
    "             label=\"Training score\")\n",
    "    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"b\",\n",
    "             label=\"Cross-validation score\")\n",
    "\n",
    "    plt.legend(loc=\"best\")\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "title = \"Learning Curves (Logistic Regression)\"\n",
    "# Cross validation with 5 iterations to get smoother mean test and train\n",
    "# score curves, each time with 20% data randomly selected as a validation set.\n",
    "cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=42)\n",
    "estimator = LogisticRegression( C = 0.0001, penalty = 'l2')#\n",
    "plot_learning_curve(estimator, title, X_train_vect, y_train, ylim=(0.2, 1.01), cv=cv, n_jobs=4)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I understand that larger number of training samples means that cross-validation AUC gets closer to training score, but what is significance in this case? That we don't need to use so many training samples? Need help interpreting this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Look at the most important words for the model.\n",
    "\n",
    "feature_importances = pd.DataFrame(clf.coef_[0],\n",
    "                                   index = vect.get_feature_names(),\n",
    "                                    columns=['importance']).sort_values('importance',\n",
    "                                                                        ascending=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "num=25\n",
    "ylocs = np.arange(num)\n",
    "# get the feature importance for top num and sort in reverse order\n",
    "values_to_plot = feature_importances.iloc[:num].values.ravel()[::-1]\n",
    "feature_labels = list(feature_importances.iloc[:num].index)[::-1]\n",
    "\n",
    "plt.figure(num=None, figsize=(8, 15), dpi=80, facecolor='w', edgecolor='k');\n",
    "plt.barh(ylocs, values_to_plot, align = 'center')\n",
    "plt.ylabel('Features')\n",
    "plt.xlabel('Importance Score')\n",
    "plt.title('Positive Feature Importance Score - Logistic Regression')\n",
    "plt.yticks(ylocs, feature_labels)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "values_to_plot = feature_importances.iloc[-num:].values.ravel()\n",
    "feature_labels = list(feature_importances.iloc[-num:].index)\n",
    "\n",
    "plt.figure(num=None, figsize=(8, 15), dpi=80, facecolor='w', edgecolor='k');\n",
    "plt.barh(ylocs, values_to_plot, align = 'center')\n",
    "plt.ylabel('Features')\n",
    "plt.xlabel('Importance Score')\n",
    "plt.title('Negative Feature Importance Score - Logistic Regression')\n",
    "plt.yticks(ylocs, feature_labels)\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " C: 0.0001\n",
      "Train AUC:0.763\n",
      "Valid AUC:0.756\n",
      "\n",
      " C: 0.001\n",
      "Train AUC:0.802\n",
      "Valid AUC:0.786\n",
      "\n",
      " C: 0.01\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC:0.825\n",
      "Valid AUC:0.796\n",
      "\n",
      " C: 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC:0.832\n",
      "Valid AUC:0.791\n",
      "\n",
      " C: 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC:0.832\n",
      "Valid AUC:0.791\n",
      "\n",
      " C: 5\n",
      "Train AUC:0.832\n",
      "Valid AUC:0.791\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "number of features: 100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC: 0.677\n",
      "Valid AUC:0.675\n",
      "\n",
      "number of features: 300\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC: 0.717\n",
      "Valid AUC:0.712\n",
      "\n",
      "number of features: 1000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC: 0.750\n",
      "Valid AUC:0.745\n",
      "\n",
      "number of features: 3000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC: 0.763\n",
      "Valid AUC:0.756\n",
      "\n",
      "number of features: 10000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC: 0.765\n",
      "Valid AUC:0.757\n",
      "\n",
      "number of features: 30000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\feature_extraction\\text.py:484: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n",
      "  warnings.warn(\"The parameter 'token_pattern' will not be used\"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train AUC: 0.765\n",
      "Valid AUC:0.757\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Find best value of C\n",
    "\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "Cs = [0.0001, 0.001, 0.01, 1, 2, 5]\n",
    "train_aucs = np.zeros(len(Cs))\n",
    "valid_aucs = np.zeros(len(Cs))\n",
    "\n",
    "for ii in range(len(Cs)):\n",
    "    C = Cs[ii]\n",
    "    print('\\n C:', C)\n",
    "    \n",
    "    # logistic regression\n",
    "    \n",
    "    clf=LogisticRegression(C = C, penalty = 'l2', random_state = 42)\n",
    "    clf.fit(X_train_vect, y_train)\n",
    "\n",
    "    model = clf\n",
    "    y_train_preds = model.predict_proba(X_train_vect)[:,1]\n",
    "    y_valid_preds = model.predict_proba(X_valid_vect)[:,1]\n",
    "\n",
    "    auc_train = roc_auc_score(y_train, y_train_preds)\n",
    "    auc_valid = roc_auc_score(y_valid, y_valid_preds)\n",
    "    print('Train AUC:%.3f'%auc_train)\n",
    "    print('Valid AUC:%.3f'%auc_valid)\n",
    "    train_aucs[ii] = auc_train\n",
    "    valid_aucs[ii] = auc_valid\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "plt.plot(Cs, train_aucs,'bo-', label ='Train')\n",
    "plt.plot(Cs, valid_aucs, 'ro-', label='Valid')\n",
    "plt.legend()\n",
    "plt.xlabel('Logistic Regression - C')\n",
    "plt.ylabel('AUC')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Effect of Max_features\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "num_features = [100,300,1000,3000,10000,30000]\n",
    "train_aucs = np.zeros(len(num_features))\n",
    "valid_aucs = np.zeros(len(num_features))\n",
    "\n",
    "for ii in range(len(num_features)):\n",
    "    num = num_features[ii]\n",
    "    print('\\nnumber of features:', num)\n",
    "    vect = CountVectorizer(lowercase = True, max_features = num, \n",
    "                           tokenizer = text_tokenizer,stop_words =stopwords_updated)\n",
    "\n",
    "    # This could take a while\n",
    "    vect.fit(df_train_final.TEXT.values)\n",
    "\n",
    "    X_train_vect = vect.transform(df_train_final.TEXT.values)\n",
    "    X_valid_vect = vect.transform(df_valid.TEXT.values)\n",
    "    y_train = df_train_final.HOSPITAL_EXPIRE_FLAG\n",
    "    y_valid = df_valid.HOSPITAL_EXPIRE_FLAG\n",
    "    \n",
    "    clf=LogisticRegression(C = 0.0001, penalty = 'l2', random_state = 42)\n",
    "    clf.fit(X_train_vect, y_train)\n",
    "\n",
    "    model = clf\n",
    "    y_train_preds = model.predict_proba(X_train_vect)[:,1]\n",
    "    y_valid_preds = model.predict_proba(X_valid_vect)[:,1]\n",
    "\n",
    "    auc_train = roc_auc_score(y_train, y_train_preds)\n",
    "    auc_valid = roc_auc_score(y_valid, y_valid_preds)\n",
    "    print('Train AUC: %.3f'%auc_train)\n",
    "    print('Valid AUC:%.3f'%auc_valid)\n",
    "    train_aucs[ii] = auc_train\n",
    "    valid_aucs[ii] = auc_valid\n",
    "\n",
    "plt.plot(num_features, train_aucs,'bo-', label ='Train')\n",
    "plt.plot(num_features, valid_aucs, 'ro-', label='Valid')\n",
    "plt.legend()\n",
    "plt.xlabel('Number of features')\n",
    "plt.ylabel('AUC')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Logistic Score (F1):  0.7521746981847593\n",
      "Best Logistic Parameters:  {'C': 0.1, 'class_weight': {1: 0.7, 0: 0.3}, 'penalty': 'l2'}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\caras\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV, StratifiedKFold\n",
    "\n",
    "clf_param_grid = {'penalty': ['l1','l2'],\n",
    "                  'C': [0.001, 0.01, 0.1, 1, 2, 5],\n",
    "                  'class_weight': [{1:0.5, 0:0.5}, {1:0.6, 0:0.4}, {1:0.7, 0:0.3}, {1:0.8, 0:0.2}, {1:0.9, 0:0.1}]\n",
    "                   }\n",
    "clf = GridSearchCV(\n",
    "    estimator=clf,\n",
    "    param_grid=clf_param_grid,               \n",
    "    n_jobs=-1,\n",
    "    scoring='f1',\n",
    "    cv=StratifiedKFold(n_splits=5,shuffle=True))\n",
    "logistic_best_model = clf.fit(X_train_vect, y_train)\n",
    "\n",
    "print('Best Logistic Score (F1): ', logistic_best_model.best_score_)\n",
    "print('Best Logistic Parameters: ', logistic_best_model.best_params_)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
